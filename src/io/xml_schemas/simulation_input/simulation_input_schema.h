// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

/**
 * @file
 * @brief Generated from simulation_input_schema.xsd.
 */

#ifndef SIMULATION_INPUT_SCHEMA_H
#define SIMULATION_INPUT_SCHEMA_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/types.hxx>
#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/dom/auto-ptr.hxx>
#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/xml/error-handler.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema {
// anyType and anySimpleType.
//

/**
 * @brief C++ type corresponding to the anyType XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::type type;

/**
 * @brief C++ type corresponding to the anySimpleType XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::simple_type<char, type> simple_type;

/**
 * @brief Alias for the anyType type.
 */
typedef ::xsd::cxx::tree::type container;

// 8-bit
//

/**
 * @brief C++ type corresponding to the byte XML Schema
 * built-in type.
 */
typedef signed char byte;

/**
 * @brief C++ type corresponding to the unsignedByte XML Schema
 * built-in type.
 */
typedef unsigned char unsigned_byte;

// 16-bit
//

/**
 * @brief C++ type corresponding to the short XML Schema
 * built-in type.
 */
typedef short short_;

/**
 * @brief C++ type corresponding to the unsignedShort XML Schema
 * built-in type.
 */
typedef unsigned short unsigned_short;

// 32-bit
//

/**
 * @brief C++ type corresponding to the int XML Schema
 * built-in type.
 */
typedef int int_;

/**
 * @brief C++ type corresponding to the unsignedInt XML Schema
 * built-in type.
 */
typedef unsigned int unsigned_int;

// 64-bit
//

/**
 * @brief C++ type corresponding to the long XML Schema
 * built-in type.
 */
typedef long long long_;

/**
 * @brief C++ type corresponding to the unsignedLong XML Schema
 * built-in type.
 */
typedef unsigned long long unsigned_long;

// Supposed to be arbitrary-length integral types.
//

/**
 * @brief C++ type corresponding to the integer XML Schema
 * built-in type.
 */
typedef long long integer;

/**
 * @brief C++ type corresponding to the nonPositiveInteger XML Schema
 * built-in type.
 */
typedef long long non_positive_integer;

/**
 * @brief C++ type corresponding to the nonNegativeInteger XML Schema
 * built-in type.
 */
typedef unsigned long long non_negative_integer;

/**
 * @brief C++ type corresponding to the positiveInteger XML Schema
 * built-in type.
 */
typedef unsigned long long positive_integer;

/**
 * @brief C++ type corresponding to the negativeInteger XML Schema
 * built-in type.
 */
typedef long long negative_integer;

// Boolean.
//

/**
 * @brief C++ type corresponding to the boolean XML Schema
 * built-in type.
 */
typedef bool boolean;

// Floating-point types.
//

/**
 * @brief C++ type corresponding to the float XML Schema
 * built-in type.
 */
typedef float float_;

/**
 * @brief C++ type corresponding to the double XML Schema
 * built-in type.
 */
typedef double double_;

/**
 * @brief C++ type corresponding to the decimal XML Schema
 * built-in type.
 */
typedef double decimal;

// String types.
//

/**
 * @brief C++ type corresponding to the string XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::string<char, simple_type> string;

/**
 * @brief C++ type corresponding to the normalizedString XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::normalized_string<char, string> normalized_string;

/**
 * @brief C++ type corresponding to the token XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::token<char, normalized_string> token;

/**
 * @brief C++ type corresponding to the Name XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::name<char, token> name;

/**
 * @brief C++ type corresponding to the NMTOKEN XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::nmtoken<char, token> nmtoken;

/**
 * @brief C++ type corresponding to the NMTOKENS XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::nmtokens<char, simple_type, nmtoken> nmtokens;

/**
 * @brief C++ type corresponding to the NCName XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::ncname<char, name> ncname;

/**
 * @brief C++ type corresponding to the language XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::language<char, token> language;

// ID/IDREF.
//

/**
 * @brief C++ type corresponding to the ID XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::id<char, ncname> id;

/**
 * @brief C++ type corresponding to the IDREF XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::idref<char, ncname, type> idref;

/**
 * @brief C++ type corresponding to the IDREFS XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::idrefs<char, simple_type, idref> idrefs;

// URI.
//

/**
 * @brief C++ type corresponding to the anyURI XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::uri<char, simple_type> uri;

// Qualified name.
//

/**
 * @brief C++ type corresponding to the QName XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::qname<char, simple_type, uri, ncname> qname;

// Binary.
//

/**
 * @brief Binary buffer type.
 */
typedef ::xsd::cxx::tree::buffer<char> buffer;

/**
 * @brief C++ type corresponding to the base64Binary XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::base64_binary<char, simple_type> base64_binary;

/**
 * @brief C++ type corresponding to the hexBinary XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::hex_binary<char, simple_type> hex_binary;

// Date/time.
//

/**
 * @brief Time zone type.
 */
typedef ::xsd::cxx::tree::time_zone time_zone;

/**
 * @brief C++ type corresponding to the date XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::date<char, simple_type> date;

/**
 * @brief C++ type corresponding to the dateTime XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::date_time<char, simple_type> date_time;

/**
 * @brief C++ type corresponding to the duration XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::duration<char, simple_type> duration;

/**
 * @brief C++ type corresponding to the gDay XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::gday<char, simple_type> gday;

/**
 * @brief C++ type corresponding to the gMonth XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::gmonth<char, simple_type> gmonth;

/**
 * @brief C++ type corresponding to the gMonthDay XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::gmonth_day<char, simple_type> gmonth_day;

/**
 * @brief C++ type corresponding to the gYear XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::gyear<char, simple_type> gyear;

/**
 * @brief C++ type corresponding to the gYearMonth XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::gyear_month<char, simple_type> gyear_month;

/**
 * @brief C++ type corresponding to the time XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::time<char, simple_type> time;

// Entity.
//

/**
 * @brief C++ type corresponding to the ENTITY XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::entity<char, ncname> entity;

/**
 * @brief C++ type corresponding to the ENTITIES XML Schema
 * built-in type.
 */
typedef ::xsd::cxx::tree::entities<char, simple_type, entity> entities;

/**
 * @brief Content order sequence entry.
 */
typedef ::xsd::cxx::tree::content_order content_order;
// Namespace information and list stream. Used in
// serialization functions.
//
/**
 * @brief Namespace serialization information.
 */
typedef ::xsd::cxx::xml::dom::namespace_info<char> namespace_info;

/**
 * @brief Namespace serialization information map.
 */
typedef ::xsd::cxx::xml::dom::namespace_infomap<char> namespace_infomap;

/**
 * @brief List serialization stream.
 */
typedef ::xsd::cxx::tree::list_stream<char> list_stream;

/**
 * @brief Serialization wrapper for the %double type.
 */
typedef ::xsd::cxx::tree::as_double<double_> as_double;

/**
 * @brief Serialization wrapper for the %decimal type.
 */
typedef ::xsd::cxx::tree::as_decimal<decimal> as_decimal;

/**
 * @brief Simple type facet.
 */
typedef ::xsd::cxx::tree::facet facet;

// Flags and properties.
//

/**
 * @brief Parsing and serialization flags.
 */
typedef ::xsd::cxx::tree::flags flags;

/**
 * @brief Parsing properties.
 */
typedef ::xsd::cxx::tree::properties<char> properties;

// Parsing/serialization diagnostics.
//

/**
 * @brief Error severity.
 */
typedef ::xsd::cxx::tree::severity severity;

/**
 * @brief Error condition.
 */
typedef ::xsd::cxx::tree::error<char> error;

/**
 * @brief List of %error conditions.
 */
typedef ::xsd::cxx::tree::diagnostics<char> diagnostics;

// Exceptions.
//

/**
 * @brief Root of the C++/Tree %exception hierarchy.
 */
typedef ::xsd::cxx::tree::exception<char> exception;

/**
 * @brief Exception indicating that the size argument exceeds
 * the capacity argument.
 */
typedef ::xsd::cxx::tree::bounds<char> bounds;

/**
 * @brief Exception indicating that a duplicate ID value
 * was encountered in the object model.
 */
typedef ::xsd::cxx::tree::duplicate_id<char> duplicate_id;

/**
 * @brief Exception indicating a parsing failure.
 */
typedef ::xsd::cxx::tree::parsing<char> parsing;

/**
 * @brief Exception indicating that an expected element
 * was not encountered.
 */
typedef ::xsd::cxx::tree::expected_element<char> expected_element;

/**
 * @brief Exception indicating that an unexpected element
 * was encountered.
 */
typedef ::xsd::cxx::tree::unexpected_element<char> unexpected_element;

/**
 * @brief Exception indicating that an expected attribute
 * was not encountered.
 */
typedef ::xsd::cxx::tree::expected_attribute<char> expected_attribute;

/**
 * @brief Exception indicating that an unexpected enumerator
 * was encountered.
 */
typedef ::xsd::cxx::tree::unexpected_enumerator<char> unexpected_enumerator;

/**
 * @brief Exception indicating that the text content was
 * expected for an element.
 */
typedef ::xsd::cxx::tree::expected_text_content<char> expected_text_content;

/**
 * @brief Exception indicating that a prefix-namespace
 * mapping was not provided.
 */
typedef ::xsd::cxx::tree::no_prefix_mapping<char> no_prefix_mapping;

/**
 * @brief Exception indicating a serialization failure.
 */
typedef ::xsd::cxx::tree::serialization<char> serialization;

/**
 * @brief Error handler callback interface.
 */
typedef ::xsd::cxx::xml::error_handler<char> error_handler;

/**
 * @brief DOM interaction.
 */
namespace dom {
/**
 * @brief Automatic pointer for DOMDocument.
 */
using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
/**
 * @brief DOM user data key for back pointers to tree nodes.
 */
const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
}  // namespace dom
}  // namespace xml_schema

// Forward declarations.
//
class ConfigurationType;
class DoubleVec3Type;
class IntVec3Type;
class ParticleContainerType;
class DirectSumContainerType;
class LinkedCellsContainerType;
class BoundaryConditionsType;
class BoundaryType;
class CuboidSpawnerType;
class SphereSpawnerType;
class SingleParticleSpawnerType;
class CheckPointLoaderType;
class SubSimulationType;
class ParticleSourceType;
class SettingsType;
class ParticleUpdatesPerSecondInterceptionType;
class RadialDistributionFunctionInterceptionType;
class FrameWriterInterceptorType;
class ThermostatInterceptorType;
class SimulationInterceptorsType;
class LennardJonesType;
class GravitationalType;
class GlobalGravityType;
class ForcesType;
class LogLevelType;
class OutputFormatType;

#include <algorithm>  // std::binary_search
#include <limits>     // std::numeric_limits
#include <memory>     // ::std::unique_ptr
#include <utility>    // std::move
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/list.hxx>
#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/dom/parsing-header.hxx>

/**
 * @brief Class corresponding to the %ConfigurationType schema type.
 *
 * @nosubgrouping
 */
class ConfigurationType : public ::xml_schema::type {
   public:
    /**
     * @name settings
     *
     * @brief Accessor and modifier functions for the %settings
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::SettingsType settings_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<settings_type, char> settings_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const settings_type& settings() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    settings_type& settings();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void settings(const settings_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void settings(::std::unique_ptr<settings_type> p);

    //@}

    /**
     * @name particle_source
     *
     * @brief Accessor and modifier functions for the %particle_source
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ParticleSourceType particle_source_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<particle_source_type, char> particle_source_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const particle_source_type& particle_source() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    particle_source_type& particle_source();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void particle_source(const particle_source_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void particle_source(::std::unique_ptr<particle_source_type> p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ConfigurationType(const settings_type&, const particle_source_type&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    ConfigurationType(::std::unique_ptr<settings_type>, ::std::unique_ptr<particle_source_type>);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ConfigurationType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ConfigurationType(const ConfigurationType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ConfigurationType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ConfigurationType& operator=(const ConfigurationType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~ConfigurationType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<settings_type> settings_;
    ::xsd::cxx::tree::one<particle_source_type> particle_source_;

    //@endcond
};

/**
 * @brief Class corresponding to the %DoubleVec3Type schema type.
 *
 * @nosubgrouping
 */
class DoubleVec3Type : public ::xml_schema::type {
   public:
    /**
     * @name x
     *
     * @brief Accessor and modifier functions for the %x
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ x_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<x_type, char, ::xsd::cxx::tree::schema_type::double_> x_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const x_type& x() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    x_type& x();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void x(const x_type& x);

    //@}

    /**
     * @name y
     *
     * @brief Accessor and modifier functions for the %y
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ y_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<y_type, char, ::xsd::cxx::tree::schema_type::double_> y_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const y_type& y() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    y_type& y();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void y(const y_type& x);

    //@}

    /**
     * @name z
     *
     * @brief Accessor and modifier functions for the %z
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ z_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<z_type, char, ::xsd::cxx::tree::schema_type::double_> z_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const z_type& z() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    z_type& z();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void z(const z_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DoubleVec3Type(const x_type&, const y_type&, const z_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DoubleVec3Type(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DoubleVec3Type(const DoubleVec3Type& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DoubleVec3Type* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DoubleVec3Type& operator=(const DoubleVec3Type& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~DoubleVec3Type();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<x_type> x_;
    ::xsd::cxx::tree::one<y_type> y_;
    ::xsd::cxx::tree::one<z_type> z_;

    //@endcond
};

/**
 * @brief Class corresponding to the %IntVec3Type schema type.
 *
 * @nosubgrouping
 */
class IntVec3Type : public ::xml_schema::type {
   public:
    /**
     * @name x
     *
     * @brief Accessor and modifier functions for the %x
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::int_ x_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<x_type, char> x_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const x_type& x() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    x_type& x();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void x(const x_type& x);

    //@}

    /**
     * @name y
     *
     * @brief Accessor and modifier functions for the %y
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::int_ y_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<y_type, char> y_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const y_type& y() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    y_type& y();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void y(const y_type& x);

    //@}

    /**
     * @name z
     *
     * @brief Accessor and modifier functions for the %z
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::int_ z_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<z_type, char> z_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const z_type& z() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    z_type& z();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void z(const z_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    IntVec3Type(const x_type&, const y_type&, const z_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    IntVec3Type(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    IntVec3Type(const IntVec3Type& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual IntVec3Type* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    IntVec3Type& operator=(const IntVec3Type& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~IntVec3Type();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<x_type> x_;
    ::xsd::cxx::tree::one<y_type> y_;
    ::xsd::cxx::tree::one<z_type> z_;

    //@endcond
};

/**
 * @brief Class corresponding to the %ParticleContainerType schema type.
 *
 * @nosubgrouping
 */
class ParticleContainerType : public ::xml_schema::type {
   public:
    /**
     * @name directsum_container
     *
     * @brief Accessor and modifier functions for the %directsum_container
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::DirectSumContainerType directsum_container_type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional<directsum_container_type> directsum_container_optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<directsum_container_type, char> directsum_container_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const directsum_container_optional& directsum_container() const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    directsum_container_optional& directsum_container();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void directsum_container(const directsum_container_type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void directsum_container(const directsum_container_optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void directsum_container(::std::unique_ptr<directsum_container_type> p);

    //@}

    /**
     * @name linkedcells_container
     *
     * @brief Accessor and modifier functions for the %linkedcells_container
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::LinkedCellsContainerType linkedcells_container_type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional<linkedcells_container_type> linkedcells_container_optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<linkedcells_container_type, char> linkedcells_container_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const linkedcells_container_optional& linkedcells_container() const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    linkedcells_container_optional& linkedcells_container();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void linkedcells_container(const linkedcells_container_type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void linkedcells_container(const linkedcells_container_optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void linkedcells_container(::std::unique_ptr<linkedcells_container_type> p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ParticleContainerType();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ParticleContainerType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ParticleContainerType(const ParticleContainerType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ParticleContainerType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ParticleContainerType& operator=(const ParticleContainerType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~ParticleContainerType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    directsum_container_optional directsum_container_;
    linkedcells_container_optional linkedcells_container_;

    //@endcond
};

/**
 * @brief Class corresponding to the %DirectSumContainerType schema type.
 *
 * @nosubgrouping
 */
class DirectSumContainerType : public ::xml_schema::type {
   public:
    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DirectSumContainerType();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DirectSumContainerType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DirectSumContainerType(const ::xercesc::DOMAttr& a, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DirectSumContainerType(const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DirectSumContainerType(const DirectSumContainerType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DirectSumContainerType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    //@}

#ifdef XSD_CXX11
    DirectSumContainerType& operator=(const DirectSumContainerType&) = default;
#endif

    /**
     * @brief Destructor.
     */
    virtual ~DirectSumContainerType();
};

/**
 * @brief Class corresponding to the %LinkedCellsContainerType schema type.
 *
 * @nosubgrouping
 */
class LinkedCellsContainerType : public ::xml_schema::type {
   public:
    /**
     * @name domain_size
     *
     * @brief Accessor and modifier functions for the %domain_size
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::DoubleVec3Type domain_size_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<domain_size_type, char> domain_size_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const domain_size_type& domain_size() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    domain_size_type& domain_size();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void domain_size(const domain_size_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void domain_size(::std::unique_ptr<domain_size_type> p);

    //@}

    /**
     * @name cutoff_radius
     *
     * @brief Accessor and modifier functions for the %cutoff_radius
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ cutoff_radius_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<cutoff_radius_type, char, ::xsd::cxx::tree::schema_type::double_> cutoff_radius_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const cutoff_radius_type& cutoff_radius() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    cutoff_radius_type& cutoff_radius();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void cutoff_radius(const cutoff_radius_type& x);

    //@}

    /**
     * @name boundary_conditions
     *
     * @brief Accessor and modifier functions for the %boundary_conditions
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::BoundaryConditionsType boundary_conditions_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<boundary_conditions_type, char> boundary_conditions_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const boundary_conditions_type& boundary_conditions() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    boundary_conditions_type& boundary_conditions();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void boundary_conditions(const boundary_conditions_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void boundary_conditions(::std::unique_ptr<boundary_conditions_type> p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    LinkedCellsContainerType(const domain_size_type&, const cutoff_radius_type&, const boundary_conditions_type&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    LinkedCellsContainerType(::std::unique_ptr<domain_size_type>, const cutoff_radius_type&, ::std::unique_ptr<boundary_conditions_type>);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    LinkedCellsContainerType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    LinkedCellsContainerType(const LinkedCellsContainerType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual LinkedCellsContainerType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    LinkedCellsContainerType& operator=(const LinkedCellsContainerType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~LinkedCellsContainerType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<domain_size_type> domain_size_;
    ::xsd::cxx::tree::one<cutoff_radius_type> cutoff_radius_;
    ::xsd::cxx::tree::one<boundary_conditions_type> boundary_conditions_;

    //@endcond
};

/**
 * @brief Class corresponding to the %BoundaryConditionsType schema type.
 *
 * @nosubgrouping
 */
class BoundaryConditionsType : public ::xml_schema::type {
   public:
    /**
     * @name left
     *
     * @brief Accessor and modifier functions for the %left
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::BoundaryType left_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<left_type, char> left_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const left_type& left() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    left_type& left();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void left(const left_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void left(::std::unique_ptr<left_type> p);

    //@}

    /**
     * @name right
     *
     * @brief Accessor and modifier functions for the %right
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::BoundaryType right_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<right_type, char> right_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const right_type& right() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    right_type& right();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void right(const right_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void right(::std::unique_ptr<right_type> p);

    //@}

    /**
     * @name bottom
     *
     * @brief Accessor and modifier functions for the %bottom
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::BoundaryType bottom_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<bottom_type, char> bottom_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const bottom_type& bottom() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    bottom_type& bottom();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void bottom(const bottom_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void bottom(::std::unique_ptr<bottom_type> p);

    //@}

    /**
     * @name top
     *
     * @brief Accessor and modifier functions for the %top
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::BoundaryType top_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<top_type, char> top_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const top_type& top() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    top_type& top();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void top(const top_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void top(::std::unique_ptr<top_type> p);

    //@}

    /**
     * @name back
     *
     * @brief Accessor and modifier functions for the %back
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::BoundaryType back_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<back_type, char> back_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const back_type& back() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    back_type& back();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void back(const back_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void back(::std::unique_ptr<back_type> p);

    //@}

    /**
     * @name front
     *
     * @brief Accessor and modifier functions for the %front
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::BoundaryType front_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<front_type, char> front_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const front_type& front() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    front_type& front();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void front(const front_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void front(::std::unique_ptr<front_type> p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    BoundaryConditionsType(const left_type&, const right_type&, const bottom_type&, const top_type&, const back_type&, const front_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    BoundaryConditionsType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    BoundaryConditionsType(const BoundaryConditionsType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual BoundaryConditionsType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    BoundaryConditionsType& operator=(const BoundaryConditionsType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~BoundaryConditionsType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<left_type> left_;
    ::xsd::cxx::tree::one<right_type> right_;
    ::xsd::cxx::tree::one<bottom_type> bottom_;
    ::xsd::cxx::tree::one<top_type> top_;
    ::xsd::cxx::tree::one<back_type> back_;
    ::xsd::cxx::tree::one<front_type> front_;

    //@endcond
};

/**
 * @brief Enumeration class corresponding to the %BoundaryType
 * schema type.
 */
class BoundaryType : public ::xml_schema::string {
   public:
    /**
     * @brief Underlying enum type.
     */
    enum value { Outflow, Reflective, Periodic };

    /**
     * @brief Create an instance from the underlying enum value.
     *
     * @param v A enum value.
     */
    BoundaryType(value v);

    /**
     * @brief Create an instance from a C string.
     *
     * @param v A string value.
     */
    BoundaryType(const char* v);

    /**
     * @brief Create an instance from a string.
     *
     * @param v A string value.
     */
    BoundaryType(const ::std::string& v);

    /**
     * @brief Create an instance from the base value.
     *
     * @param v A base value.
     */
    BoundaryType(const ::xml_schema::string& v);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    BoundaryType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    BoundaryType(const ::xercesc::DOMAttr& a, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    BoundaryType(const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    BoundaryType(const BoundaryType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

#ifdef XSD_CXX11
    BoundaryType& operator=(const BoundaryType&) = default;
#endif

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual BoundaryType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Assign the underlying enum value.
     *
     * @param v A enum value.
     * @return A refernce to the instance.
     */
    BoundaryType& operator=(value v);

    /**
     * @brief Implicit conversion operator to the underlying
     * enum value.
     *
     * @return A enum value.
     */
    virtual operator value() const { return _xsd_BoundaryType_convert(); }

    //@cond

   protected:
    value _xsd_BoundaryType_convert() const;

   public:
    static const char* const _xsd_BoundaryType_literals_[3];
    static const value _xsd_BoundaryType_indexes_[3];

    //@endcond
};

/**
 * @brief Class corresponding to the %CuboidSpawnerType schema type.
 *
 * @nosubgrouping
 */
class CuboidSpawnerType : public ::xml_schema::type {
   public:
    /**
     * @name lower_left_front_corner
     *
     * @brief Accessor and modifier functions for the %lower_left_front_corner
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::DoubleVec3Type lower_left_front_corner_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<lower_left_front_corner_type, char> lower_left_front_corner_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const lower_left_front_corner_type& lower_left_front_corner() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    lower_left_front_corner_type& lower_left_front_corner();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void lower_left_front_corner(const lower_left_front_corner_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void lower_left_front_corner(::std::unique_ptr<lower_left_front_corner_type> p);

    //@}

    /**
     * @name grid_dim
     *
     * @brief Accessor and modifier functions for the %grid_dim
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::IntVec3Type grid_dim_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<grid_dim_type, char> grid_dim_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const grid_dim_type& grid_dim() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    grid_dim_type& grid_dim();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void grid_dim(const grid_dim_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void grid_dim(::std::unique_ptr<grid_dim_type> p);

    //@}

    /**
     * @name grid_spacing
     *
     * @brief Accessor and modifier functions for the %grid_spacing
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ grid_spacing_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<grid_spacing_type, char, ::xsd::cxx::tree::schema_type::double_> grid_spacing_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const grid_spacing_type& grid_spacing() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    grid_spacing_type& grid_spacing();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void grid_spacing(const grid_spacing_type& x);

    //@}

    /**
     * @name temperature
     *
     * @brief Accessor and modifier functions for the %temperature
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ temperature_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<temperature_type, char, ::xsd::cxx::tree::schema_type::double_> temperature_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const temperature_type& temperature() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    temperature_type& temperature();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void temperature(const temperature_type& x);

    //@}

    /**
     * @name mass
     *
     * @brief Accessor and modifier functions for the %mass
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ mass_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<mass_type, char, ::xsd::cxx::tree::schema_type::double_> mass_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const mass_type& mass() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    mass_type& mass();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void mass(const mass_type& x);

    //@}

    /**
     * @name velocity
     *
     * @brief Accessor and modifier functions for the %velocity
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::DoubleVec3Type velocity_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<velocity_type, char> velocity_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const velocity_type& velocity() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    velocity_type& velocity();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void velocity(const velocity_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void velocity(::std::unique_ptr<velocity_type> p);

    //@}

    /**
     * @name type
     *
     * @brief Accessor and modifier functions for the %type
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::integer type_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<type_type, char> type_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const type_type& type() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    type_type& type();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void type(const type_type& x);

    //@}

    /**
     * @name epsilon
     *
     * @brief Accessor and modifier functions for the %epsilon
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ epsilon_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<epsilon_type, char, ::xsd::cxx::tree::schema_type::double_> epsilon_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const epsilon_type& epsilon() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    epsilon_type& epsilon();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void epsilon(const epsilon_type& x);

    //@}

    /**
     * @name sigma
     *
     * @brief Accessor and modifier functions for the %sigma
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ sigma_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<sigma_type, char, ::xsd::cxx::tree::schema_type::double_> sigma_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const sigma_type& sigma() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    sigma_type& sigma();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void sigma(const sigma_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CuboidSpawnerType(const lower_left_front_corner_type&, const grid_dim_type&, const grid_spacing_type&, const temperature_type&,
                      const mass_type&, const velocity_type&, const type_type&, const epsilon_type&, const sigma_type&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    CuboidSpawnerType(::std::unique_ptr<lower_left_front_corner_type>, ::std::unique_ptr<grid_dim_type>, const grid_spacing_type&,
                      const temperature_type&, const mass_type&, ::std::unique_ptr<velocity_type>, const type_type&, const epsilon_type&,
                      const sigma_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CuboidSpawnerType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CuboidSpawnerType(const CuboidSpawnerType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CuboidSpawnerType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CuboidSpawnerType& operator=(const CuboidSpawnerType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~CuboidSpawnerType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<lower_left_front_corner_type> lower_left_front_corner_;
    ::xsd::cxx::tree::one<grid_dim_type> grid_dim_;
    ::xsd::cxx::tree::one<grid_spacing_type> grid_spacing_;
    ::xsd::cxx::tree::one<temperature_type> temperature_;
    ::xsd::cxx::tree::one<mass_type> mass_;
    ::xsd::cxx::tree::one<velocity_type> velocity_;
    ::xsd::cxx::tree::one<type_type> type_;
    ::xsd::cxx::tree::one<epsilon_type> epsilon_;
    ::xsd::cxx::tree::one<sigma_type> sigma_;

    //@endcond
};

/**
 * @brief Class corresponding to the %SphereSpawnerType schema type.
 *
 * @nosubgrouping
 */
class SphereSpawnerType : public ::xml_schema::type {
   public:
    /**
     * @name center
     *
     * @brief Accessor and modifier functions for the %center
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::DoubleVec3Type center_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<center_type, char> center_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const center_type& center() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    center_type& center();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void center(const center_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void center(::std::unique_ptr<center_type> p);

    //@}

    /**
     * @name radius
     *
     * @brief Accessor and modifier functions for the %radius
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::integer radius_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<radius_type, char> radius_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const radius_type& radius() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    radius_type& radius();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void radius(const radius_type& x);

    //@}

    /**
     * @name grid_spacing
     *
     * @brief Accessor and modifier functions for the %grid_spacing
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ grid_spacing_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<grid_spacing_type, char, ::xsd::cxx::tree::schema_type::double_> grid_spacing_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const grid_spacing_type& grid_spacing() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    grid_spacing_type& grid_spacing();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void grid_spacing(const grid_spacing_type& x);

    //@}

    /**
     * @name temperature
     *
     * @brief Accessor and modifier functions for the %temperature
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ temperature_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<temperature_type, char, ::xsd::cxx::tree::schema_type::double_> temperature_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const temperature_type& temperature() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    temperature_type& temperature();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void temperature(const temperature_type& x);

    //@}

    /**
     * @name mass
     *
     * @brief Accessor and modifier functions for the %mass
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ mass_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<mass_type, char, ::xsd::cxx::tree::schema_type::double_> mass_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const mass_type& mass() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    mass_type& mass();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void mass(const mass_type& x);

    //@}

    /**
     * @name velocity
     *
     * @brief Accessor and modifier functions for the %velocity
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::DoubleVec3Type velocity_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<velocity_type, char> velocity_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const velocity_type& velocity() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    velocity_type& velocity();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void velocity(const velocity_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void velocity(::std::unique_ptr<velocity_type> p);

    //@}

    /**
     * @name type
     *
     * @brief Accessor and modifier functions for the %type
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::integer type_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<type_type, char> type_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const type_type& type() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    type_type& type();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void type(const type_type& x);

    //@}

    /**
     * @name epsilon
     *
     * @brief Accessor and modifier functions for the %epsilon
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ epsilon_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<epsilon_type, char, ::xsd::cxx::tree::schema_type::double_> epsilon_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const epsilon_type& epsilon() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    epsilon_type& epsilon();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void epsilon(const epsilon_type& x);

    //@}

    /**
     * @name sigma
     *
     * @brief Accessor and modifier functions for the %sigma
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ sigma_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<sigma_type, char, ::xsd::cxx::tree::schema_type::double_> sigma_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const sigma_type& sigma() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    sigma_type& sigma();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void sigma(const sigma_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SphereSpawnerType(const center_type&, const radius_type&, const grid_spacing_type&, const temperature_type&, const mass_type&,
                      const velocity_type&, const type_type&, const epsilon_type&, const sigma_type&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    SphereSpawnerType(::std::unique_ptr<center_type>, const radius_type&, const grid_spacing_type&, const temperature_type&,
                      const mass_type&, ::std::unique_ptr<velocity_type>, const type_type&, const epsilon_type&, const sigma_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SphereSpawnerType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SphereSpawnerType(const SphereSpawnerType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SphereSpawnerType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SphereSpawnerType& operator=(const SphereSpawnerType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~SphereSpawnerType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<center_type> center_;
    ::xsd::cxx::tree::one<radius_type> radius_;
    ::xsd::cxx::tree::one<grid_spacing_type> grid_spacing_;
    ::xsd::cxx::tree::one<temperature_type> temperature_;
    ::xsd::cxx::tree::one<mass_type> mass_;
    ::xsd::cxx::tree::one<velocity_type> velocity_;
    ::xsd::cxx::tree::one<type_type> type_;
    ::xsd::cxx::tree::one<epsilon_type> epsilon_;
    ::xsd::cxx::tree::one<sigma_type> sigma_;

    //@endcond
};

/**
 * @brief Class corresponding to the %SingleParticleSpawnerType schema type.
 *
 * @nosubgrouping
 */
class SingleParticleSpawnerType : public ::xml_schema::type {
   public:
    /**
     * @name position
     *
     * @brief Accessor and modifier functions for the %position
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::DoubleVec3Type position_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<position_type, char> position_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const position_type& position() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    position_type& position();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void position(const position_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void position(::std::unique_ptr<position_type> p);

    //@}

    /**
     * @name temperature
     *
     * @brief Accessor and modifier functions for the %temperature
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ temperature_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<temperature_type, char, ::xsd::cxx::tree::schema_type::double_> temperature_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const temperature_type& temperature() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    temperature_type& temperature();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void temperature(const temperature_type& x);

    //@}

    /**
     * @name mass
     *
     * @brief Accessor and modifier functions for the %mass
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ mass_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<mass_type, char, ::xsd::cxx::tree::schema_type::double_> mass_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const mass_type& mass() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    mass_type& mass();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void mass(const mass_type& x);

    //@}

    /**
     * @name velocity
     *
     * @brief Accessor and modifier functions for the %velocity
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::DoubleVec3Type velocity_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<velocity_type, char> velocity_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const velocity_type& velocity() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    velocity_type& velocity();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void velocity(const velocity_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void velocity(::std::unique_ptr<velocity_type> p);

    //@}

    /**
     * @name type
     *
     * @brief Accessor and modifier functions for the %type
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::integer type_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<type_type, char> type_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const type_type& type() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    type_type& type();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void type(const type_type& x);

    //@}

    /**
     * @name epsilon
     *
     * @brief Accessor and modifier functions for the %epsilon
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ epsilon_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<epsilon_type, char, ::xsd::cxx::tree::schema_type::double_> epsilon_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const epsilon_type& epsilon() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    epsilon_type& epsilon();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void epsilon(const epsilon_type& x);

    //@}

    /**
     * @name sigma
     *
     * @brief Accessor and modifier functions for the %sigma
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ sigma_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<sigma_type, char, ::xsd::cxx::tree::schema_type::double_> sigma_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const sigma_type& sigma() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    sigma_type& sigma();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void sigma(const sigma_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SingleParticleSpawnerType(const position_type&, const temperature_type&, const mass_type&, const velocity_type&, const type_type&,
                              const epsilon_type&, const sigma_type&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    SingleParticleSpawnerType(::std::unique_ptr<position_type>, const temperature_type&, const mass_type&, ::std::unique_ptr<velocity_type>,
                              const type_type&, const epsilon_type&, const sigma_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SingleParticleSpawnerType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SingleParticleSpawnerType(const SingleParticleSpawnerType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SingleParticleSpawnerType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SingleParticleSpawnerType& operator=(const SingleParticleSpawnerType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~SingleParticleSpawnerType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<position_type> position_;
    ::xsd::cxx::tree::one<temperature_type> temperature_;
    ::xsd::cxx::tree::one<mass_type> mass_;
    ::xsd::cxx::tree::one<velocity_type> velocity_;
    ::xsd::cxx::tree::one<type_type> type_;
    ::xsd::cxx::tree::one<epsilon_type> epsilon_;
    ::xsd::cxx::tree::one<sigma_type> sigma_;

    //@endcond
};

/**
 * @brief Class corresponding to the %CheckPointLoaderType schema type.
 *
 * @nosubgrouping
 */
class CheckPointLoaderType : public ::xml_schema::type {
   public:
    /**
     * @name path
     *
     * @brief Accessor and modifier functions for the %path
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::uri path_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<path_type, char> path_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const path_type& path() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    path_type& path();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void path(const path_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void path(::std::unique_ptr<path_type> p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    CheckPointLoaderType(const path_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    CheckPointLoaderType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CheckPointLoaderType(const CheckPointLoaderType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual CheckPointLoaderType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    CheckPointLoaderType& operator=(const CheckPointLoaderType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~CheckPointLoaderType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<path_type> path_;

    //@endcond
};

/**
 * @brief Class corresponding to the %SubSimulationType schema type.
 *
 * @nosubgrouping
 */
class SubSimulationType : public ::xml_schema::type {
   public:
    /**
     * @name path
     *
     * @brief Accessor and modifier functions for the %path
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string path_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<path_type, char> path_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const path_type& path() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    path_type& path();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void path(const path_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void path(::std::unique_ptr<path_type> p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SubSimulationType(const path_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SubSimulationType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SubSimulationType(const SubSimulationType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SubSimulationType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SubSimulationType& operator=(const SubSimulationType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~SubSimulationType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<path_type> path_;

    //@endcond
};

/**
 * @brief Class corresponding to the %ParticleSourceType schema type.
 *
 * @nosubgrouping
 */
class ParticleSourceType : public ::xml_schema::type {
   public:
    /**
     * @name cuboid_spawner
     *
     * @brief Accessor and modifier functions for the %cuboid_spawner
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CuboidSpawnerType cuboid_spawner_type;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence<cuboid_spawner_type> cuboid_spawner_sequence;

    /**
     * @brief Element iterator type.
     */
    typedef cuboid_spawner_sequence::iterator cuboid_spawner_iterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef cuboid_spawner_sequence::const_iterator cuboid_spawner_const_iterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<cuboid_spawner_type, char> cuboid_spawner_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const cuboid_spawner_sequence& cuboid_spawner() const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    cuboid_spawner_sequence& cuboid_spawner();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it
     * to the sequence. Note that this operation completely changes the
     * sequence and all old elements will be lost.
     */
    void cuboid_spawner(const cuboid_spawner_sequence& s);

    //@}

    /**
     * @name sphere_spawner
     *
     * @brief Accessor and modifier functions for the %sphere_spawner
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::SphereSpawnerType sphere_spawner_type;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence<sphere_spawner_type> sphere_spawner_sequence;

    /**
     * @brief Element iterator type.
     */
    typedef sphere_spawner_sequence::iterator sphere_spawner_iterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef sphere_spawner_sequence::const_iterator sphere_spawner_const_iterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<sphere_spawner_type, char> sphere_spawner_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const sphere_spawner_sequence& sphere_spawner() const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    sphere_spawner_sequence& sphere_spawner();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it
     * to the sequence. Note that this operation completely changes the
     * sequence and all old elements will be lost.
     */
    void sphere_spawner(const sphere_spawner_sequence& s);

    //@}

    /**
     * @name single_particle_spawner
     *
     * @brief Accessor and modifier functions for the %single_particle_spawner
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::SingleParticleSpawnerType single_particle_spawner_type;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence<single_particle_spawner_type> single_particle_spawner_sequence;

    /**
     * @brief Element iterator type.
     */
    typedef single_particle_spawner_sequence::iterator single_particle_spawner_iterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef single_particle_spawner_sequence::const_iterator single_particle_spawner_const_iterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<single_particle_spawner_type, char> single_particle_spawner_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const single_particle_spawner_sequence& single_particle_spawner() const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    single_particle_spawner_sequence& single_particle_spawner();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it
     * to the sequence. Note that this operation completely changes the
     * sequence and all old elements will be lost.
     */
    void single_particle_spawner(const single_particle_spawner_sequence& s);

    //@}

    /**
     * @name check_point_loader
     *
     * @brief Accessor and modifier functions for the %check_point_loader
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::CheckPointLoaderType check_point_loader_type;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence<check_point_loader_type> check_point_loader_sequence;

    /**
     * @brief Element iterator type.
     */
    typedef check_point_loader_sequence::iterator check_point_loader_iterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef check_point_loader_sequence::const_iterator check_point_loader_const_iterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<check_point_loader_type, char> check_point_loader_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const check_point_loader_sequence& check_point_loader() const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    check_point_loader_sequence& check_point_loader();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it
     * to the sequence. Note that this operation completely changes the
     * sequence and all old elements will be lost.
     */
    void check_point_loader(const check_point_loader_sequence& s);

    //@}

    /**
     * @name sub_simulation
     *
     * @brief Accessor and modifier functions for the %sub_simulation
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::SubSimulationType sub_simulation_type;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence<sub_simulation_type> sub_simulation_sequence;

    /**
     * @brief Element iterator type.
     */
    typedef sub_simulation_sequence::iterator sub_simulation_iterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef sub_simulation_sequence::const_iterator sub_simulation_const_iterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<sub_simulation_type, char> sub_simulation_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const sub_simulation_sequence& sub_simulation() const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    sub_simulation_sequence& sub_simulation();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it
     * to the sequence. Note that this operation completely changes the
     * sequence and all old elements will be lost.
     */
    void sub_simulation(const sub_simulation_sequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ParticleSourceType();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ParticleSourceType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ParticleSourceType(const ParticleSourceType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ParticleSourceType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ParticleSourceType& operator=(const ParticleSourceType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~ParticleSourceType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    cuboid_spawner_sequence cuboid_spawner_;
    sphere_spawner_sequence sphere_spawner_;
    single_particle_spawner_sequence single_particle_spawner_;
    check_point_loader_sequence check_point_loader_;
    sub_simulation_sequence sub_simulation_;

    //@endcond
};

/**
 * @brief Class corresponding to the %SettingsType schema type.
 *
 * @nosubgrouping
 */
class SettingsType : public ::xml_schema::type {
   public:
    /**
     * @name delta_t
     *
     * @brief Accessor and modifier functions for the %delta_t
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ delta_t_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<delta_t_type, char, ::xsd::cxx::tree::schema_type::double_> delta_t_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const delta_t_type& delta_t() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    delta_t_type& delta_t();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void delta_t(const delta_t_type& x);

    //@}

    /**
     * @name end_time
     *
     * @brief Accessor and modifier functions for the %end_time
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::double_ end_time_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<end_time_type, char, ::xsd::cxx::tree::schema_type::double_> end_time_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const end_time_type& end_time() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    end_time_type& end_time();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void end_time(const end_time_type& x);

    //@}

    /**
     * @name third_dimension
     *
     * @brief Accessor and modifier functions for the %third_dimension
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::boolean third_dimension_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<third_dimension_type, char> third_dimension_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const third_dimension_type& third_dimension() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    third_dimension_type& third_dimension();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void third_dimension(const third_dimension_type& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static third_dimension_type third_dimension_default_value();

    //@}

    /**
     * @name particle_container
     *
     * @brief Accessor and modifier functions for the %particle_container
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ParticleContainerType particle_container_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<particle_container_type, char> particle_container_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const particle_container_type& particle_container() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    particle_container_type& particle_container();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void particle_container(const particle_container_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void particle_container(::std::unique_ptr<particle_container_type> p);

    //@}

    /**
     * @name forces
     *
     * @brief Accessor and modifier functions for the %forces
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ForcesType forces_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<forces_type, char> forces_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const forces_type& forces() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    forces_type& forces();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void forces(const forces_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void forces(::std::unique_ptr<forces_type> p);

    //@}

    /**
     * @name interceptors
     *
     * @brief Accessor and modifier functions for the %interceptors
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::SimulationInterceptorsType interceptors_type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<interceptors_type, char> interceptors_traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const interceptors_type& interceptors() const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    interceptors_type& interceptors();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void interceptors(const interceptors_type& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void interceptors(::std::unique_ptr<interceptors_type> p);

    //@}

    /**
     * @name log_level
     *
     * @brief Accessor and modifier functions for the %log_level
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::LogLevelType log_level_type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional<log_level_type> log_level_optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<log_level_type, char> log_level_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const log_level_optional& log_level() const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    log_level_optional& log_level();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void log_level(const log_level_type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void log_level(const log_level_optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void log_level(::std::unique_ptr<log_level_type> p);

    /**
     * @brief Return the default value for the element.
     *
     * @return A read-only (constant) reference to the element's
     * default value.
     */
    static const log_level_type& log_level_default_value();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SettingsType(const delta_t_type&, const end_time_type&, const third_dimension_type&, const particle_container_type&, const forces_type&,
                 const interceptors_type&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    SettingsType(const delta_t_type&, const end_time_type&, const third_dimension_type&, ::std::unique_ptr<particle_container_type>,
                 ::std::unique_ptr<forces_type>, ::std::unique_ptr<interceptors_type>);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SettingsType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SettingsType(const SettingsType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SettingsType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SettingsType& operator=(const SettingsType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~SettingsType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<delta_t_type> delta_t_;
    ::xsd::cxx::tree::one<end_time_type> end_time_;
    ::xsd::cxx::tree::one<third_dimension_type> third_dimension_;
    ::xsd::cxx::tree::one<particle_container_type> particle_container_;
    ::xsd::cxx::tree::one<forces_type> forces_;
    ::xsd::cxx::tree::one<interceptors_type> interceptors_;
    log_level_optional log_level_;
    static const log_level_type log_level_default_value_;

    //@endcond
};

/**
 * @brief Class corresponding to the %ParticleUpdatesPerSecondInterceptionType schema type.
 *
 * @nosubgrouping
 */
class ParticleUpdatesPerSecondInterceptionType : public ::xml_schema::type {
   public:
    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ParticleUpdatesPerSecondInterceptionType();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ParticleUpdatesPerSecondInterceptionType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ParticleUpdatesPerSecondInterceptionType(const ::xercesc::DOMAttr& a, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ParticleUpdatesPerSecondInterceptionType(const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ParticleUpdatesPerSecondInterceptionType(const ParticleUpdatesPerSecondInterceptionType& x, ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ParticleUpdatesPerSecondInterceptionType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    //@}

#ifdef XSD_CXX11
    ParticleUpdatesPerSecondInterceptionType& operator=(const ParticleUpdatesPerSecondInterceptionType&) = default;
#endif

    /**
     * @brief Destructor.
     */
    virtual ~ParticleUpdatesPerSecondInterceptionType();
};

/**
 * @brief Class corresponding to the %RadialDistributionFunctionInterceptionType schema type.
 *
 * @nosubgrouping
 */
class RadialDistributionFunctionInterceptionType : public ::xml_schema::type {
   public:
    /**
     * @name bin_width
     *
     * @brief Accessor and modifier functions for the %bin_width
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::double_ bin_width_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<bin_width_type, char, ::xsd::cxx::tree::schema_type::double_> bin_width_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const bin_width_type& bin_width() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    bin_width_type& bin_width();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void bin_width(const bin_width_type& x);

    //@}

    /**
     * @name sample_every_x_percent
     *
     * @brief Accessor and modifier functions for the %sample_every_x_percent
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::double_ sample_every_x_percent_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<sample_every_x_percent_type, char, ::xsd::cxx::tree::schema_type::double_>
        sample_every_x_percent_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const sample_every_x_percent_type& sample_every_x_percent() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    sample_every_x_percent_type& sample_every_x_percent();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void sample_every_x_percent(const sample_every_x_percent_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    RadialDistributionFunctionInterceptionType(const bin_width_type&, const sample_every_x_percent_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    RadialDistributionFunctionInterceptionType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    RadialDistributionFunctionInterceptionType(const RadialDistributionFunctionInterceptionType& x, ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual RadialDistributionFunctionInterceptionType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    RadialDistributionFunctionInterceptionType& operator=(const RadialDistributionFunctionInterceptionType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~RadialDistributionFunctionInterceptionType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<bin_width_type> bin_width_;
    ::xsd::cxx::tree::one<sample_every_x_percent_type> sample_every_x_percent_;

    //@endcond
};

/**
 * @brief Class corresponding to the %FrameWriterInterceptorType schema type.
 *
 * @nosubgrouping
 */
class FrameWriterInterceptorType : public ::xml_schema::type {
   public:
    /**
     * @name output_format
     *
     * @brief Accessor and modifier functions for the %output_format
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::OutputFormatType output_format_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<output_format_type, char> output_format_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const output_format_type& output_format() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    output_format_type& output_format();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void output_format(const output_format_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void output_format(::std::unique_ptr<output_format_type> p);

    //@}

    /**
     * @name fps
     *
     * @brief Accessor and modifier functions for the %fps
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::integer fps_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<fps_type, char> fps_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const fps_type& fps() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    fps_type& fps();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void fps(const fps_type& x);

    //@}

    /**
     * @name video_length_s
     *
     * @brief Accessor and modifier functions for the %video_length_s
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::integer video_length_s_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<video_length_s_type, char> video_length_s_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const video_length_s_type& video_length_s() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    video_length_s_type& video_length_s();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void video_length_s(const video_length_s_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    FrameWriterInterceptorType(const output_format_type&, const fps_type&, const video_length_s_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    FrameWriterInterceptorType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    FrameWriterInterceptorType(const FrameWriterInterceptorType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual FrameWriterInterceptorType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    FrameWriterInterceptorType& operator=(const FrameWriterInterceptorType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~FrameWriterInterceptorType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<output_format_type> output_format_;
    ::xsd::cxx::tree::one<fps_type> fps_;
    ::xsd::cxx::tree::one<video_length_s_type> video_length_s_;

    //@endcond
};

/**
 * @brief Class corresponding to the %ThermostatInterceptorType schema type.
 *
 * @nosubgrouping
 */
class ThermostatInterceptorType : public ::xml_schema::type {
   public:
    /**
     * @name target_temperature
     *
     * @brief Accessor and modifier functions for the %target_temperature
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::double_ target_temperature_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<target_temperature_type, char, ::xsd::cxx::tree::schema_type::double_> target_temperature_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const target_temperature_type& target_temperature() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    target_temperature_type& target_temperature();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void target_temperature(const target_temperature_type& x);

    //@}

    /**
     * @name max_temperature_change
     *
     * @brief Accessor and modifier functions for the %max_temperature_change
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::double_ max_temperature_change_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<max_temperature_change_type, char, ::xsd::cxx::tree::schema_type::double_>
        max_temperature_change_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const max_temperature_change_type& max_temperature_change() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    max_temperature_change_type& max_temperature_change();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void max_temperature_change(const max_temperature_change_type& x);

    //@}

    /**
     * @name application_interval
     *
     * @brief Accessor and modifier functions for the %application_interval
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::integer application_interval_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<application_interval_type, char> application_interval_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const application_interval_type& application_interval() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    application_interval_type& application_interval();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void application_interval(const application_interval_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ThermostatInterceptorType(const target_temperature_type&, const max_temperature_change_type&, const application_interval_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ThermostatInterceptorType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ThermostatInterceptorType(const ThermostatInterceptorType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ThermostatInterceptorType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ThermostatInterceptorType& operator=(const ThermostatInterceptorType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~ThermostatInterceptorType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<target_temperature_type> target_temperature_;
    ::xsd::cxx::tree::one<max_temperature_change_type> max_temperature_change_;
    ::xsd::cxx::tree::one<application_interval_type> application_interval_;

    //@endcond
};

/**
 * @brief Class corresponding to the %SimulationInterceptorsType schema type.
 *
 * @nosubgrouping
 */
class SimulationInterceptorsType : public ::xml_schema::type {
   public:
    /**
     * @name ParticleUpdatesPerSecond
     *
     * @brief Accessor and modifier functions for the %ParticleUpdatesPerSecond
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ParticleUpdatesPerSecondInterceptionType ParticleUpdatesPerSecond_type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional<ParticleUpdatesPerSecond_type> ParticleUpdatesPerSecond_optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<ParticleUpdatesPerSecond_type, char> ParticleUpdatesPerSecond_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ParticleUpdatesPerSecond_optional& ParticleUpdatesPerSecond() const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ParticleUpdatesPerSecond_optional& ParticleUpdatesPerSecond();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void ParticleUpdatesPerSecond(const ParticleUpdatesPerSecond_type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void ParticleUpdatesPerSecond(const ParticleUpdatesPerSecond_optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void ParticleUpdatesPerSecond(::std::unique_ptr<ParticleUpdatesPerSecond_type> p);

    //@}

    /**
     * @name RadialDistributionFunction
     *
     * @brief Accessor and modifier functions for the %RadialDistributionFunction
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::RadialDistributionFunctionInterceptionType RadialDistributionFunction_type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional<RadialDistributionFunction_type> RadialDistributionFunction_optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<RadialDistributionFunction_type, char> RadialDistributionFunction_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const RadialDistributionFunction_optional& RadialDistributionFunction() const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    RadialDistributionFunction_optional& RadialDistributionFunction();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void RadialDistributionFunction(const RadialDistributionFunction_type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void RadialDistributionFunction(const RadialDistributionFunction_optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void RadialDistributionFunction(::std::unique_ptr<RadialDistributionFunction_type> p);

    //@}

    /**
     * @name FrameWriter
     *
     * @brief Accessor and modifier functions for the %FrameWriter
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::FrameWriterInterceptorType FrameWriter_type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional<FrameWriter_type> FrameWriter_optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<FrameWriter_type, char> FrameWriter_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const FrameWriter_optional& FrameWriter() const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    FrameWriter_optional& FrameWriter();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void FrameWriter(const FrameWriter_type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void FrameWriter(const FrameWriter_optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void FrameWriter(::std::unique_ptr<FrameWriter_type> p);

    //@}

    /**
     * @name Thermostat
     *
     * @brief Accessor and modifier functions for the %Thermostat
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::ThermostatInterceptorType Thermostat_type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional<Thermostat_type> Thermostat_optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<Thermostat_type, char> Thermostat_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const Thermostat_optional& Thermostat() const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    Thermostat_optional& Thermostat();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void Thermostat(const Thermostat_type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void Thermostat(const Thermostat_optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void Thermostat(::std::unique_ptr<Thermostat_type> p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SimulationInterceptorsType();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SimulationInterceptorsType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SimulationInterceptorsType(const SimulationInterceptorsType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SimulationInterceptorsType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SimulationInterceptorsType& operator=(const SimulationInterceptorsType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~SimulationInterceptorsType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ParticleUpdatesPerSecond_optional ParticleUpdatesPerSecond_;
    RadialDistributionFunction_optional RadialDistributionFunction_;
    FrameWriter_optional FrameWriter_;
    Thermostat_optional Thermostat_;

    //@endcond
};

/**
 * @brief Class corresponding to the %LennardJonesType schema type.
 *
 * @nosubgrouping
 */
class LennardJonesType : public ::xml_schema::type {
   public:
    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    LennardJonesType();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    LennardJonesType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    LennardJonesType(const ::xercesc::DOMAttr& a, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    LennardJonesType(const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    LennardJonesType(const LennardJonesType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual LennardJonesType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    //@}

#ifdef XSD_CXX11
    LennardJonesType& operator=(const LennardJonesType&) = default;
#endif

    /**
     * @brief Destructor.
     */
    virtual ~LennardJonesType();
};

/**
 * @brief Class corresponding to the %GravitationalType schema type.
 *
 * @nosubgrouping
 */
class GravitationalType : public ::xml_schema::type {
   public:
    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    GravitationalType();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    GravitationalType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    GravitationalType(const ::xercesc::DOMAttr& a, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    GravitationalType(const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    GravitationalType(const GravitationalType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual GravitationalType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    //@}

#ifdef XSD_CXX11
    GravitationalType& operator=(const GravitationalType&) = default;
#endif

    /**
     * @brief Destructor.
     */
    virtual ~GravitationalType();
};

/**
 * @brief Class corresponding to the %GlobalGravityType schema type.
 *
 * @nosubgrouping
 */
class GlobalGravityType : public ::xml_schema::type {
   public:
    /**
     * @name g
     *
     * @brief Accessor and modifier functions for the %g
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::double_ g_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits<g_type, char, ::xsd::cxx::tree::schema_type::double_> g_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const g_type& g() const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    g_type& g();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void g(const g_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    GlobalGravityType(const g_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    GlobalGravityType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    GlobalGravityType(const GlobalGravityType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual GlobalGravityType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    GlobalGravityType& operator=(const GlobalGravityType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~GlobalGravityType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    ::xsd::cxx::tree::one<g_type> g_;

    //@endcond
};

/**
 * @brief Class corresponding to the %ForcesType schema type.
 *
 * @nosubgrouping
 */
class ForcesType : public ::xml_schema::type {
   public:
    /**
     * @name LennardJones
     *
     * @brief Accessor and modifier functions for the %LennardJones
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::LennardJonesType LennardJones_type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional<LennardJones_type> LennardJones_optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<LennardJones_type, char> LennardJones_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const LennardJones_optional& LennardJones() const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    LennardJones_optional& LennardJones();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void LennardJones(const LennardJones_type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void LennardJones(const LennardJones_optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void LennardJones(::std::unique_ptr<LennardJones_type> p);

    //@}

    /**
     * @name Gravitational
     *
     * @brief Accessor and modifier functions for the %Gravitational
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::GravitationalType Gravitational_type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional<Gravitational_type> Gravitational_optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<Gravitational_type, char> Gravitational_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const Gravitational_optional& Gravitational() const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    Gravitational_optional& Gravitational();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void Gravitational(const Gravitational_type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void Gravitational(const Gravitational_optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void Gravitational(::std::unique_ptr<Gravitational_type> p);

    //@}

    /**
     * @name GlobalDownwardsGravity
     *
     * @brief Accessor and modifier functions for the %GlobalDownwardsGravity
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::GlobalGravityType GlobalDownwardsGravity_type;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional<GlobalDownwardsGravity_type> GlobalDownwardsGravity_optional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits<GlobalDownwardsGravity_type, char> GlobalDownwardsGravity_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const GlobalDownwardsGravity_optional& GlobalDownwardsGravity() const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    GlobalDownwardsGravity_optional& GlobalDownwardsGravity();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void GlobalDownwardsGravity(const GlobalDownwardsGravity_type& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void GlobalDownwardsGravity(const GlobalDownwardsGravity_optional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void GlobalDownwardsGravity(::std::unique_ptr<GlobalDownwardsGravity_type> p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ForcesType();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ForcesType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ForcesType(const ForcesType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ForcesType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ForcesType& operator=(const ForcesType& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual ~ForcesType();

    // Implementation.
    //

    //@cond

   protected:
    void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

   protected:
    LennardJones_optional LennardJones_;
    Gravitational_optional Gravitational_;
    GlobalDownwardsGravity_optional GlobalDownwardsGravity_;

    //@endcond
};

/**
 * @brief Enumeration class corresponding to the %LogLevelType
 * schema type.
 */
class LogLevelType : public ::xml_schema::string {
   public:
    /**
     * @brief Underlying enum type.
     */
    enum value { off, critical, error, warning, info, debug };

    /**
     * @brief Create an instance from the underlying enum value.
     *
     * @param v A enum value.
     */
    LogLevelType(value v);

    /**
     * @brief Create an instance from a C string.
     *
     * @param v A string value.
     */
    LogLevelType(const char* v);

    /**
     * @brief Create an instance from a string.
     *
     * @param v A string value.
     */
    LogLevelType(const ::std::string& v);

    /**
     * @brief Create an instance from the base value.
     *
     * @param v A base value.
     */
    LogLevelType(const ::xml_schema::string& v);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    LogLevelType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    LogLevelType(const ::xercesc::DOMAttr& a, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    LogLevelType(const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    LogLevelType(const LogLevelType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

#ifdef XSD_CXX11
    LogLevelType& operator=(const LogLevelType&) = default;
#endif

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual LogLevelType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Assign the underlying enum value.
     *
     * @param v A enum value.
     * @return A refernce to the instance.
     */
    LogLevelType& operator=(value v);

    /**
     * @brief Implicit conversion operator to the underlying
     * enum value.
     *
     * @return A enum value.
     */
    virtual operator value() const { return _xsd_LogLevelType_convert(); }

    //@cond

   protected:
    value _xsd_LogLevelType_convert() const;

   public:
    static const char* const _xsd_LogLevelType_literals_[6];
    static const value _xsd_LogLevelType_indexes_[6];

    //@endcond
};

/**
 * @brief Enumeration class corresponding to the %OutputFormatType
 * schema type.
 */
class OutputFormatType : public ::xml_schema::string {
   public:
    /**
     * @brief Underlying enum type.
     */
    enum value { vtu, chkpt, xyz, none };

    /**
     * @brief Create an instance from the underlying enum value.
     *
     * @param v A enum value.
     */
    OutputFormatType(value v);

    /**
     * @brief Create an instance from a C string.
     *
     * @param v A string value.
     */
    OutputFormatType(const char* v);

    /**
     * @brief Create an instance from a string.
     *
     * @param v A string value.
     */
    OutputFormatType(const ::std::string& v);

    /**
     * @brief Create an instance from the base value.
     *
     * @param v A base value.
     */
    OutputFormatType(const ::xml_schema::string& v);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    OutputFormatType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    OutputFormatType(const ::xercesc::DOMAttr& a, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    OutputFormatType(const ::std::string& s, const ::xercesc::DOMElement* e, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    OutputFormatType(const OutputFormatType& x, ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

#ifdef XSD_CXX11
    OutputFormatType& operator=(const OutputFormatType&) = default;
#endif

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual OutputFormatType* _clone(::xml_schema::flags f = 0, ::xml_schema::container* c = 0) const;

    /**
     * @brief Assign the underlying enum value.
     *
     * @param v A enum value.
     * @return A refernce to the instance.
     */
    OutputFormatType& operator=(value v);

    /**
     * @brief Implicit conversion operator to the underlying
     * enum value.
     *
     * @return A enum value.
     */
    virtual operator value() const { return _xsd_OutputFormatType_convert(); }

    //@cond

   protected:
    value _xsd_OutputFormatType_convert() const;

   public:
    static const char* const _xsd_OutputFormatType_literals_[4];
    static const value _xsd_OutputFormatType_indexes_[4];

    //@endcond
};

#include <iosfwd>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/sax/InputSource.hpp>

/**
 * @name Parsing functions for the %configuration document root.
 */
//@{

/**
 * @brief Parse a URI or a local file.
 *
 * @param uri A URI or a local file name.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::ConfigurationType> configuration(const ::std::string& uri, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a URI or a local file with an error handler.
 *
 * @param uri A URI or a local file name.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::ConfigurationType> configuration(const ::std::string& uri, ::xml_schema::error_handler& eh, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a URI or a local file with a Xerces-C++ DOM error
 * handler.
 *
 * @param uri A URI or a local file name.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::ConfigurationType> configuration(const ::std::string& uri, ::xercesc::DOMErrorHandler& eh, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a standard input stream.
 *
 * @param is A standrad input stream.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::ConfigurationType> configuration(::std::istream& is, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a standard input stream with an error handler.
 *
 * @param is A standrad input stream.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::ConfigurationType> configuration(::std::istream& is, ::xml_schema::error_handler& eh, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a standard input stream with a Xerces-C++ DOM error
 * handler.
 *
 * @param is A standrad input stream.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::ConfigurationType> configuration(::std::istream& is, ::xercesc::DOMErrorHandler& eh, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a standard input stream with a resource id.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::ConfigurationType> configuration(::std::istream& is, const ::std::string& id, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a standard input stream with a resource id and an
 * error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::ConfigurationType> configuration(::std::istream& is, const ::std::string& id, ::xml_schema::error_handler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a standard input stream with a resource id and a
 * Xerces-C++ DOM error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::ConfigurationType> configuration(::std::istream& is, const ::std::string& id, ::xercesc::DOMErrorHandler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a Xerces-C++ input source.
 *
 * @param is A Xerces-C++ input source.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::ConfigurationType> configuration(::xercesc::InputSource& is, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a Xerces-C++ input source with an error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::ConfigurationType> configuration(::xercesc::InputSource& is, ::xml_schema::error_handler& eh,
                                                      ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
 * error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::ConfigurationType> configuration(::xercesc::InputSource& is, ::xercesc::DOMErrorHandler& eh, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 */
::std::unique_ptr< ::ConfigurationType> configuration(const ::xercesc::DOMDocument& d, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A pointer to the Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties.
 * @return A pointer to the root of the object model.
 *
 * This function is normally used together with the keep_dom and
 * own_dom parsing flags to assign ownership of the DOM document
 * to the object model.
 */
::std::unique_ptr< ::ConfigurationType> configuration(::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument> d, ::xml_schema::flags f = 0,
                                                      const ::xml_schema::properties& p = ::xml_schema::properties());

//@}

#include <iosfwd>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>
#include <xsd/cxx/xml/dom/auto-ptr.hxx>

/**
 * @name Serialization functions for the %configuration document root.
 */
//@{

/**
 * @brief Serialize to a standard output stream.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function uses exceptions to report serialization errors.
 */
void configuration(::std::ostream& os, const ::ConfigurationType& x,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(), const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

/**
 * @brief Serialize to a standard output stream with an error handler.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param eh An error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void configuration(::std::ostream& os, const ::ConfigurationType& x, ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(), const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

/**
 * @brief Serialize to a standard output stream with a Xerces-C++ DOM
 * error handler.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param eh A Xerces-C++ DOM error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void configuration(::std::ostream& os, const ::ConfigurationType& x, ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(), const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function uses exceptions to report serialization errors.
 */
void configuration(::xercesc::XMLFormatTarget& ft, const ::ConfigurationType& x,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(), const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target with an error
 * handler.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param eh An error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void configuration(::xercesc::XMLFormatTarget& ft, const ::ConfigurationType& x, ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(), const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target with a
 * Xerces-C++ DOM error handler.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param eh A Xerces-C++ DOM error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void configuration(::xercesc::XMLFormatTarget& ft, const ::ConfigurationType& x, ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(), const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

/**
 * @brief Serialize to an existing Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param x An object model to serialize.
 * @param f Serialization flags.
 *
 * Note that it is your responsibility to create the DOM document
 * with the correct root element as well as set the necessary
 * namespace mapping attributes.
 */
void configuration(::xercesc::DOMDocument& d, const ::ConfigurationType& x, ::xml_schema::flags f = 0);

/**
 * @brief Serialize to a new Xerces-C++ DOM document.
 *
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param f Serialization flags.
 * @return A pointer to the new Xerces-C++ DOM document.
 */
::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument> configuration(
    const ::ConfigurationType& x, const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap(), ::xml_schema::flags f = 0);

//@}

void operator<<(::xercesc::DOMElement&, const ConfigurationType&);

void operator<<(::xercesc::DOMElement&, const DoubleVec3Type&);

void operator<<(::xercesc::DOMElement&, const IntVec3Type&);

void operator<<(::xercesc::DOMElement&, const ParticleContainerType&);

void operator<<(::xercesc::DOMElement&, const DirectSumContainerType&);

void operator<<(::xercesc::DOMAttr&, const DirectSumContainerType&);

void operator<<(::xml_schema::list_stream&, const DirectSumContainerType&);

void operator<<(::xercesc::DOMElement&, const LinkedCellsContainerType&);

void operator<<(::xercesc::DOMElement&, const BoundaryConditionsType&);

void operator<<(::xercesc::DOMElement&, const BoundaryType&);

void operator<<(::xercesc::DOMAttr&, const BoundaryType&);

void operator<<(::xml_schema::list_stream&, const BoundaryType&);

void operator<<(::xercesc::DOMElement&, const CuboidSpawnerType&);

void operator<<(::xercesc::DOMElement&, const SphereSpawnerType&);

void operator<<(::xercesc::DOMElement&, const SingleParticleSpawnerType&);

void operator<<(::xercesc::DOMElement&, const CheckPointLoaderType&);

void operator<<(::xercesc::DOMElement&, const SubSimulationType&);

void operator<<(::xercesc::DOMElement&, const ParticleSourceType&);

void operator<<(::xercesc::DOMElement&, const SettingsType&);

void operator<<(::xercesc::DOMElement&, const ParticleUpdatesPerSecondInterceptionType&);

void operator<<(::xercesc::DOMAttr&, const ParticleUpdatesPerSecondInterceptionType&);

void operator<<(::xml_schema::list_stream&, const ParticleUpdatesPerSecondInterceptionType&);

void operator<<(::xercesc::DOMElement&, const RadialDistributionFunctionInterceptionType&);

void operator<<(::xercesc::DOMElement&, const FrameWriterInterceptorType&);

void operator<<(::xercesc::DOMElement&, const ThermostatInterceptorType&);

void operator<<(::xercesc::DOMElement&, const SimulationInterceptorsType&);

void operator<<(::xercesc::DOMElement&, const LennardJonesType&);

void operator<<(::xercesc::DOMAttr&, const LennardJonesType&);

void operator<<(::xml_schema::list_stream&, const LennardJonesType&);

void operator<<(::xercesc::DOMElement&, const GravitationalType&);

void operator<<(::xercesc::DOMAttr&, const GravitationalType&);

void operator<<(::xml_schema::list_stream&, const GravitationalType&);

void operator<<(::xercesc::DOMElement&, const GlobalGravityType&);

void operator<<(::xercesc::DOMElement&, const ForcesType&);

void operator<<(::xercesc::DOMElement&, const LogLevelType&);

void operator<<(::xercesc::DOMAttr&, const LogLevelType&);

void operator<<(::xml_schema::list_stream&, const LogLevelType&);

void operator<<(::xercesc::DOMElement&, const OutputFormatType&);

void operator<<(::xercesc::DOMAttr&, const OutputFormatType&);

void operator<<(::xml_schema::list_stream&, const OutputFormatType&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif  // SIMULATION_INPUT_SCHEMA_H
