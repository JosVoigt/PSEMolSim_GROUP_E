// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simulation-pskel.hxx"

// vector3D_pskel
//

void vector3D_pskel::
x_parser (::xml_schema::double_pskel& p)
{
  this->x_parser_ = &p;
}

void vector3D_pskel::
y_parser (::xml_schema::double_pskel& p)
{
  this->y_parser_ = &p;
}

void vector3D_pskel::
z_parser (::xml_schema::double_pskel& p)
{
  this->z_parser_ = &p;
}

void vector3D_pskel::
parsers (::xml_schema::double_pskel& x,
         ::xml_schema::double_pskel& y,
         ::xml_schema::double_pskel& z)
{
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

vector3D_pskel::
vector3D_pskel ()
: x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// cuboid_pskel
//

void cuboid_pskel::
velocity_parser (::vector3D_pskel& p)
{
  this->velocity_parser_ = &p;
}

void cuboid_pskel::
lowerLeftCorner_parser (::vector3D_pskel& p)
{
  this->lowerLeftCorner_parser_ = &p;
}

void cuboid_pskel::
distance_parser (::xml_schema::double_pskel& p)
{
  this->distance_parser_ = &p;
}

void cuboid_pskel::
mass_parser (::xml_schema::double_pskel& p)
{
  this->mass_parser_ = &p;
}

void cuboid_pskel::
x_parser (::xml_schema::int_pskel& p)
{
  this->x_parser_ = &p;
}

void cuboid_pskel::
y_parser (::xml_schema::int_pskel& p)
{
  this->y_parser_ = &p;
}

void cuboid_pskel::
z_parser (::xml_schema::int_pskel& p)
{
  this->z_parser_ = &p;
}

void cuboid_pskel::
brownianMotionMean_parser (::xml_schema::double_pskel& p)
{
  this->brownianMotionMean_parser_ = &p;
}

void cuboid_pskel::
parsers (::vector3D_pskel& velocity,
         ::vector3D_pskel& lowerLeftCorner,
         ::xml_schema::double_pskel& distance,
         ::xml_schema::double_pskel& mass,
         ::xml_schema::int_pskel& x,
         ::xml_schema::int_pskel& y,
         ::xml_schema::int_pskel& z,
         ::xml_schema::double_pskel& brownianMotionMean)
{
  this->velocity_parser_ = &velocity;
  this->lowerLeftCorner_parser_ = &lowerLeftCorner;
  this->distance_parser_ = &distance;
  this->mass_parser_ = &mass;
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
  this->brownianMotionMean_parser_ = &brownianMotionMean;
}

cuboid_pskel::
cuboid_pskel ()
: velocity_parser_ (0),
  lowerLeftCorner_parser_ (0),
  distance_parser_ (0),
  mass_parser_ (0),
  x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  brownianMotionMean_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// lenjonesmol_pskel
//

void lenjonesmol_pskel::
epsilon_parser (::xml_schema::double_pskel& p)
{
  this->epsilon_parser_ = &p;
}

void lenjonesmol_pskel::
sigma_parser (::xml_schema::double_pskel& p)
{
  this->sigma_parser_ = &p;
}

void lenjonesmol_pskel::
parsers (::xml_schema::double_pskel& epsilon,
         ::xml_schema::double_pskel& sigma)
{
  this->epsilon_parser_ = &epsilon;
  this->sigma_parser_ = &sigma;
}

lenjonesmol_pskel::
lenjonesmol_pskel ()
: epsilon_parser_ (0),
  sigma_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// simulation_pskel
//

void simulation_pskel::
delta_parser (::xml_schema::double_pskel& p)
{
  this->delta_parser_ = &p;
}

void simulation_pskel::
frequency_parser (::xml_schema::int_pskel& p)
{
  this->frequency_parser_ = &p;
}

void simulation_pskel::
dimensions_parser (::xml_schema::int_pskel& p)
{
  this->dimensions_parser_ = &p;
}

void simulation_pskel::
start_parser (::xml_schema::double_pskel& p)
{
  this->start_parser_ = &p;
}

void simulation_pskel::
end_parser (::xml_schema::double_pskel& p)
{
  this->end_parser_ = &p;
}

void simulation_pskel::
outfile_parser (::xml_schema::string_pskel& p)
{
  this->outfile_parser_ = &p;
}

void simulation_pskel::
cuboids_parser (::cuboid_pskel& p)
{
  this->cuboids_parser_ = &p;
}

void simulation_pskel::
lenjonesmol_parser (::lenjonesmol_pskel& p)
{
  this->lenjonesmol_parser_ = &p;
}

void simulation_pskel::
parsers (::xml_schema::double_pskel& delta,
         ::xml_schema::int_pskel& frequency,
         ::xml_schema::int_pskel& dimensions,
         ::xml_schema::double_pskel& start,
         ::xml_schema::double_pskel& end,
         ::xml_schema::string_pskel& outfile,
         ::cuboid_pskel& cuboids,
         ::lenjonesmol_pskel& lenjonesmol)
{
  this->delta_parser_ = &delta;
  this->frequency_parser_ = &frequency;
  this->dimensions_parser_ = &dimensions;
  this->start_parser_ = &start;
  this->end_parser_ = &end;
  this->outfile_parser_ = &outfile;
  this->cuboids_parser_ = &cuboids;
  this->lenjonesmol_parser_ = &lenjonesmol;
}

simulation_pskel::
simulation_pskel ()
: delta_parser_ (0),
  frequency_parser_ (0),
  dimensions_parser_ (0),
  start_parser_ (0),
  end_parser_ (0),
  outfile_parser_ (0),
  cuboids_parser_ (0),
  lenjonesmol_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// vector3D_pskel
//

void vector3D_pskel::
x (double)
{
}

void vector3D_pskel::
y (double)
{
}

void vector3D_pskel::
z (double)
{
}

void vector3D_pskel::
post_vector3D ()
{
}

// cuboid_pskel
//

void cuboid_pskel::
velocity ()
{
}

void cuboid_pskel::
lowerLeftCorner ()
{
}

void cuboid_pskel::
distance (double)
{
}

void cuboid_pskel::
mass (double)
{
}

void cuboid_pskel::
x (int)
{
}

void cuboid_pskel::
y (int)
{
}

void cuboid_pskel::
z (int)
{
}

void cuboid_pskel::
brownianMotionMean (double)
{
}

void cuboid_pskel::
post_cuboid ()
{
}

// lenjonesmol_pskel
//

void lenjonesmol_pskel::
epsilon (double)
{
}

void lenjonesmol_pskel::
sigma (double)
{
}

void lenjonesmol_pskel::
post_lenjonesmol ()
{
}

// simulation_pskel
//

void simulation_pskel::
delta (double)
{
}

void simulation_pskel::
frequency (int)
{
}

void simulation_pskel::
dimensions (int)
{
}

void simulation_pskel::
start (double)
{
}

void simulation_pskel::
end (double)
{
}

void simulation_pskel::
outfile (const ::std::string&)
{
}

void simulation_pskel::
cuboids ()
{
}

void simulation_pskel::
lenjonesmol ()
{
}

void simulation_pskel::
post_simulation ()
{
}

#include <cassert>

// Element validation and dispatch functions for vector3D_pskel.
//
bool vector3D_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "x" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &vector3D_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool vector3D_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void vector3D_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void vector3D_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "x");

  this->v_state_stack_.pop ();
}

void vector3D_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            double tmp (this->x_parser_->post_double ());
            this->x (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            double tmp (this->y_parser_->post_double ());
            this->y (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            double tmp (this->z_parser_->post_double ());
            this->z (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for cuboid_pskel.
//
bool cuboid_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "velocity" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &cuboid_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "velocity",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool cuboid_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void cuboid_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void cuboid_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "velocity");

  this->v_state_stack_.pop ();
}

void cuboid_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "velocity" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->velocity_parser_;

          if (this->velocity_parser_)
            this->velocity_parser_->pre ();
        }
        else
        {
          if (this->velocity_parser_)
          {
            this->velocity_parser_->post_vector3D ();
            this->velocity ();
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "velocity",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "lowerLeftCorner" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->lowerLeftCorner_parser_;

          if (this->lowerLeftCorner_parser_)
            this->lowerLeftCorner_parser_->pre ();
        }
        else
        {
          if (this->lowerLeftCorner_parser_)
          {
            this->lowerLeftCorner_parser_->post_vector3D ();
            this->lowerLeftCorner ();
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "lowerLeftCorner",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "distance" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->distance_parser_;

          if (this->distance_parser_)
            this->distance_parser_->pre ();
        }
        else
        {
          if (this->distance_parser_)
          {
            double tmp (this->distance_parser_->post_double ());
            this->distance (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "distance",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "mass" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->mass_parser_;

          if (this->mass_parser_)
            this->mass_parser_->pre ();
        }
        else
        {
          if (this->mass_parser_)
          {
            double tmp (this->mass_parser_->post_double ());
            this->mass (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "mass",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            int tmp (this->x_parser_->post_int ());
            this->x (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            int tmp (this->y_parser_->post_int ());
            this->y (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            int tmp (this->z_parser_->post_int ());
            this->z (tmp);
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if (n == "brownianMotionMean" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->brownianMotionMean_parser_;

          if (this->brownianMotionMean_parser_)
            this->brownianMotionMean_parser_->pre ();
        }
        else
        {
          if (this->brownianMotionMean_parser_)
          {
            double tmp (this->brownianMotionMean_parser_->post_double ());
            this->brownianMotionMean (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "brownianMotionMean",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for lenjonesmol_pskel.
//
bool lenjonesmol_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "epsilon" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &lenjonesmol_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "epsilon",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool lenjonesmol_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void lenjonesmol_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void lenjonesmol_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "epsilon");

  this->v_state_stack_.pop ();
}

void lenjonesmol_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "epsilon" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->epsilon_parser_;

          if (this->epsilon_parser_)
            this->epsilon_parser_->pre ();
        }
        else
        {
          if (this->epsilon_parser_)
          {
            double tmp (this->epsilon_parser_->post_double ());
            this->epsilon (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "epsilon",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "sigma" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->sigma_parser_;

          if (this->sigma_parser_)
            this->sigma_parser_->pre ();
        }
        else
        {
          if (this->sigma_parser_)
          {
            double tmp (this->sigma_parser_->post_double ());
            this->sigma (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "sigma",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for simulation_pskel.
//
bool simulation_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "delta" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &simulation_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "delta",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool simulation_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void simulation_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void simulation_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "delta");

  this->v_state_stack_.pop ();
}

void simulation_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "delta" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->delta_parser_;

          if (this->delta_parser_)
            this->delta_parser_->pre ();
        }
        else
        {
          if (this->delta_parser_)
          {
            double tmp (this->delta_parser_->post_double ());
            this->delta (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "delta",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "frequency" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->frequency_parser_;

          if (this->frequency_parser_)
            this->frequency_parser_->pre ();
        }
        else
        {
          if (this->frequency_parser_)
          {
            int tmp (this->frequency_parser_->post_int ());
            this->frequency (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "frequency",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "dimensions" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->dimensions_parser_;

          if (this->dimensions_parser_)
            this->dimensions_parser_->pre ();
        }
        else
        {
          if (this->dimensions_parser_)
          {
            int tmp (this->dimensions_parser_->post_int ());
            this->dimensions (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "dimensions",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "start" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->start_parser_;

          if (this->start_parser_)
            this->start_parser_->pre ();
        }
        else
        {
          if (this->start_parser_)
          {
            double tmp (this->start_parser_->post_double ());
            this->start (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "start",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if (n == "end" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->end_parser_;

          if (this->end_parser_)
            this->end_parser_->pre ();
        }
        else
        {
          if (this->end_parser_)
          {
            double tmp (this->end_parser_->post_double ());
            this->end (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "end",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if (n == "outfile" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->outfile_parser_;

          if (this->outfile_parser_)
            this->outfile_parser_->pre ();
        }
        else
        {
          if (this->outfile_parser_)
          {
            const ::std::string& tmp (this->outfile_parser_->post_string ());
            this->outfile (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "outfile",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if (n == "cuboids" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->cuboids_parser_;

          if (this->cuboids_parser_)
            this->cuboids_parser_->pre ();
        }
        else
        {
          if (this->cuboids_parser_)
          {
            this->cuboids_parser_->post_cuboid ();
            this->cuboids ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 2UL)
          this->_expected_element (
            "", "cuboids",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if (n == "lenjonesmol" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->lenjonesmol_parser_;

          if (this->lenjonesmol_parser_)
            this->lenjonesmol_parser_->pre ();
        }
        else
        {
          if (this->lenjonesmol_parser_)
          {
            this->lenjonesmol_parser_->post_lenjonesmol ();
            this->lenjonesmol ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "lenjonesmol",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

