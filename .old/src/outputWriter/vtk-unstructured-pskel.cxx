// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "vtk-unstructured-pskel.hxx"

// DataArrayList_t_pskel
//

void DataArrayList_t_pskel::
item_parser (::xml_schema::decimal_pskel& item)
{
  this->_xsd_item_ = &item;
}

void DataArrayList_t_pskel::
parsers (::xml_schema::decimal_pskel& item)
{
  this->_xsd_item_ = &item;
}

DataArrayList_t_pskel::
DataArrayList_t_pskel ()
: _xsd_item_ (0)
{
}

// DataArray_t_pskel
//

void DataArray_t_pskel::
type_parser (::type_pskel& p)
{
  this->type_parser_ = &p;
}

void DataArray_t_pskel::
Name_parser (::xml_schema::string_pskel& p)
{
  this->Name_parser_ = &p;
}

void DataArray_t_pskel::
NumberOfComponents_parser (::xml_schema::integer_pskel& p)
{
  this->NumberOfComponents_parser_ = &p;
}

void DataArray_t_pskel::
format_parser (::xml_schema::string_pskel& p)
{
  this->format_parser_ = &p;
}

void DataArray_t_pskel::
offset_parser (::xml_schema::integer_pskel& p)
{
  this->offset_parser_ = &p;
}

void DataArray_t_pskel::
parsers (::xml_schema::decimal_pskel& DataArrayList_t_pskel_item,
         ::type_pskel& type,
         ::xml_schema::string_pskel& Name,
         ::xml_schema::integer_pskel& NumberOfComponents,
         ::xml_schema::string_pskel& format,
         ::xml_schema::integer_pskel& offset)
{
  this->_xsd_item_ = &DataArrayList_t_pskel_item;
  this->type_parser_ = &type;
  this->Name_parser_ = &Name;
  this->NumberOfComponents_parser_ = &NumberOfComponents;
  this->format_parser_ = &format;
  this->offset_parser_ = &offset;
}

DataArray_t_pskel::
DataArray_t_pskel ()
: type_parser_ (0),
  Name_parser_ (0),
  NumberOfComponents_parser_ (0),
  format_parser_ (0),
  offset_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// PieceUnstructuredGrid_t_pskel
//

void PieceUnstructuredGrid_t_pskel::
PointData_parser (::PointData_pskel& p)
{
  this->PointData_parser_ = &p;
}

void PieceUnstructuredGrid_t_pskel::
CellData_parser (::CellData_pskel& p)
{
  this->CellData_parser_ = &p;
}

void PieceUnstructuredGrid_t_pskel::
Points_parser (::Points_pskel& p)
{
  this->Points_parser_ = &p;
}

void PieceUnstructuredGrid_t_pskel::
Cells_parser (::Cells_pskel& p)
{
  this->Cells_parser_ = &p;
}

void PieceUnstructuredGrid_t_pskel::
NumberOfPoints_parser (::xml_schema::integer_pskel& p)
{
  this->NumberOfPoints_parser_ = &p;
}

void PieceUnstructuredGrid_t_pskel::
NumberOfCells_parser (::xml_schema::integer_pskel& p)
{
  this->NumberOfCells_parser_ = &p;
}

void PieceUnstructuredGrid_t_pskel::
parsers (::PointData_pskel& PointData,
         ::CellData_pskel& CellData,
         ::Points_pskel& Points,
         ::Cells_pskel& Cells,
         ::xml_schema::integer_pskel& NumberOfPoints,
         ::xml_schema::integer_pskel& NumberOfCells)
{
  this->PointData_parser_ = &PointData;
  this->CellData_parser_ = &CellData;
  this->Points_parser_ = &Points;
  this->Cells_parser_ = &Cells;
  this->NumberOfPoints_parser_ = &NumberOfPoints;
  this->NumberOfCells_parser_ = &NumberOfCells;
}

PieceUnstructuredGrid_t_pskel::
PieceUnstructuredGrid_t_pskel ()
: PointData_parser_ (0),
  CellData_parser_ (0),
  Points_parser_ (0),
  Cells_parser_ (0),
  NumberOfPoints_parser_ (0),
  NumberOfCells_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// UnstructuredGrid_t_pskel
//

void UnstructuredGrid_t_pskel::
Piece_parser (::PieceUnstructuredGrid_t_pskel& p)
{
  this->Piece_parser_ = &p;
}

void UnstructuredGrid_t_pskel::
parsers (::PieceUnstructuredGrid_t_pskel& Piece)
{
  this->Piece_parser_ = &Piece;
}

UnstructuredGrid_t_pskel::
UnstructuredGrid_t_pskel ()
: Piece_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_all_count_ (1UL, v_all_first_)
{
}

// PolyData_t_pskel
//

void PolyData_t_pskel::
greeting_parser (::xml_schema::string_pskel& p)
{
  this->greeting_parser_ = &p;
}

void PolyData_t_pskel::
parsers (::xml_schema::string_pskel& greeting)
{
  this->greeting_parser_ = &greeting;
}

PolyData_t_pskel::
PolyData_t_pskel ()
: greeting_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// VTKFile_t_pskel
//

void VTKFile_t_pskel::
UnstructuredGrid_parser (::UnstructuredGrid_t_pskel& p)
{
  this->UnstructuredGrid_parser_ = &p;
}

void VTKFile_t_pskel::
PolyData_parser (::PolyData_t_pskel& p)
{
  this->PolyData_parser_ = &p;
}

void VTKFile_t_pskel::
type_parser (::xml_schema::string_pskel& p)
{
  this->type_parser_ = &p;
}

void VTKFile_t_pskel::
version_parser (::xml_schema::string_pskel& p)
{
  this->version_parser_ = &p;
}

void VTKFile_t_pskel::
byte_order_parser (::xml_schema::string_pskel& p)
{
  this->byte_order_parser_ = &p;
}

void VTKFile_t_pskel::
parsers (::UnstructuredGrid_t_pskel& UnstructuredGrid,
         ::PolyData_t_pskel& PolyData,
         ::xml_schema::string_pskel& type,
         ::xml_schema::string_pskel& version,
         ::xml_schema::string_pskel& byte_order)
{
  this->UnstructuredGrid_parser_ = &UnstructuredGrid;
  this->PolyData_parser_ = &PolyData;
  this->type_parser_ = &type;
  this->version_parser_ = &version;
  this->byte_order_parser_ = &byte_order;
}

VTKFile_t_pskel::
VTKFile_t_pskel ()
: UnstructuredGrid_parser_ (0),
  PolyData_parser_ (0),
  type_parser_ (0),
  version_parser_ (0),
  byte_order_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// PointData_pskel
//

void PointData_pskel::
DataArray_parser (::DataArray_t_pskel& p)
{
  this->DataArray_parser_ = &p;
}

void PointData_pskel::
parsers (::DataArray_t_pskel& DataArray)
{
  this->DataArray_parser_ = &DataArray;
}

PointData_pskel::
PointData_pskel ()
: DataArray_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// CellData_pskel
//

void CellData_pskel::
DataArray_parser (::DataArray_t_pskel& p)
{
  this->DataArray_parser_ = &p;
}

void CellData_pskel::
parsers (::DataArray_t_pskel& DataArray)
{
  this->DataArray_parser_ = &DataArray;
}

CellData_pskel::
CellData_pskel ()
: DataArray_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// Points_pskel
//

void Points_pskel::
DataArray_parser (::DataArray_t_pskel& p)
{
  this->DataArray_parser_ = &p;
}

void Points_pskel::
parsers (::DataArray_t_pskel& DataArray)
{
  this->DataArray_parser_ = &DataArray;
}

Points_pskel::
Points_pskel ()
: DataArray_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// Cells_pskel
//

void Cells_pskel::
DataArray_parser (::DataArray_t_pskel& p)
{
  this->DataArray_parser_ = &p;
}

void Cells_pskel::
parsers (::DataArray_t_pskel& DataArray)
{
  this->DataArray_parser_ = &DataArray;
}

Cells_pskel::
Cells_pskel ()
: DataArray_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// DataArrayList_t_pskel
//

void DataArrayList_t_pskel::
item (double)
{
}

void DataArrayList_t_pskel::
post_DataArrayList_t ()
{
}

void DataArrayList_t_pskel::
_xsd_parse_item (const ::xml_schema::ro_string& v)
{
  if (this->_xsd_item_)
  {
    this->_xsd_item_->pre ();
    this->_xsd_item_->_pre_impl ();
    this->_xsd_item_->_characters (v);
    this->_xsd_item_->_post_impl ();
    this->item (this->_xsd_item_->post_decimal ());
  }
}

// DataArray_t_pskel
//

void DataArray_t_pskel::
type ()
{
}

void DataArray_t_pskel::
Name (const ::std::string&)
{
}

void DataArray_t_pskel::
NumberOfComponents (long long)
{
}

void DataArray_t_pskel::
format (const ::std::string&)
{
}

void DataArray_t_pskel::
offset (long long)
{
}

void DataArray_t_pskel::
post_DataArray_t ()
{
  post_DataArrayList_t ();
}

// PieceUnstructuredGrid_t_pskel
//

void PieceUnstructuredGrid_t_pskel::
PointData ()
{
}

void PieceUnstructuredGrid_t_pskel::
CellData ()
{
}

void PieceUnstructuredGrid_t_pskel::
Points ()
{
}

void PieceUnstructuredGrid_t_pskel::
Cells ()
{
}

void PieceUnstructuredGrid_t_pskel::
NumberOfPoints (long long)
{
}

void PieceUnstructuredGrid_t_pskel::
NumberOfCells (long long)
{
}

void PieceUnstructuredGrid_t_pskel::
post_PieceUnstructuredGrid_t ()
{
}

// UnstructuredGrid_t_pskel
//

void UnstructuredGrid_t_pskel::
Piece ()
{
}

void UnstructuredGrid_t_pskel::
post_UnstructuredGrid_t ()
{
}

// PolyData_t_pskel
//

void PolyData_t_pskel::
greeting (const ::std::string&)
{
}

void PolyData_t_pskel::
post_PolyData_t ()
{
}

// VTKFile_t_pskel
//

void VTKFile_t_pskel::
UnstructuredGrid ()
{
}

void VTKFile_t_pskel::
PolyData ()
{
}

void VTKFile_t_pskel::
type (const ::std::string&)
{
}

void VTKFile_t_pskel::
version (const ::std::string&)
{
}

void VTKFile_t_pskel::
byte_order (const ::std::string&)
{
}

void VTKFile_t_pskel::
post_VTKFile_t ()
{
}

// type_pskel
//

void type_pskel::
post_type ()
{
}

// PointData_pskel
//

void PointData_pskel::
DataArray ()
{
}

void PointData_pskel::
post_PointData ()
{
}

// CellData_pskel
//

void CellData_pskel::
DataArray ()
{
}

void CellData_pskel::
post_CellData ()
{
}

// Points_pskel
//

void Points_pskel::
DataArray ()
{
}

void Points_pskel::
post_Points ()
{
}

// Cells_pskel
//

void Cells_pskel::
DataArray ()
{
}

void Cells_pskel::
post_Cells ()
{
}

#include <cassert>

// Element validation and dispatch functions for PieceUnstructuredGrid_t_pskel.
//
bool PieceUnstructuredGrid_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "PointData" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &PieceUnstructuredGrid_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "PointData",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool PieceUnstructuredGrid_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void PieceUnstructuredGrid_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void PieceUnstructuredGrid_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "PointData");

  this->v_state_stack_.pop ();
}

void PieceUnstructuredGrid_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "PointData" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->PointData_parser_;

          if (this->PointData_parser_)
            this->PointData_parser_->pre ();
        }
        else
        {
          if (this->PointData_parser_)
          {
            this->PointData_parser_->post_PointData ();
            this->PointData ();
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "PointData",
            ns, n);
        count = 0;
        state = 1UL;
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "CellData" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->CellData_parser_;

          if (this->CellData_parser_)
            this->CellData_parser_->pre ();
        }
        else
        {
          if (this->CellData_parser_)
          {
            this->CellData_parser_->post_CellData ();
            this->CellData ();
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "CellData",
            ns, n);
        count = 0;
        state = 2UL;
      }
    }
    // Fall through.
    case 2UL:
    {
      if (n == "Points" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->Points_parser_;

          if (this->Points_parser_)
            this->Points_parser_->pre ();
        }
        else
        {
          if (this->Points_parser_)
          {
            this->Points_parser_->post_Points ();
            this->Points ();
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Points",
            ns, n);
        count = 0;
        state = 3UL;
      }
    }
    // Fall through.
    case 3UL:
    {
      if (n == "Cells" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->Cells_parser_;

          if (this->Cells_parser_)
            this->Cells_parser_->pre ();
        }
        else
        {
          if (this->Cells_parser_)
          {
            this->Cells_parser_->post_Cells ();
            this->Cells ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "Cells",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for UnstructuredGrid_t_pskel.
//
bool UnstructuredGrid_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

  if (vd->state != ~0UL)
    vd->count++;
  else
    return false;

  return true;
}

bool UnstructuredGrid_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

  return true;
}

void UnstructuredGrid_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_all_count_.push ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void UnstructuredGrid_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.count != 0)
  {
    ::xml_schema::ro_string empty;
    all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
  }
  else
    this->_expected_element (
      "", "Piece");

  vs.size--;
  v_all_count_.pop ();

  this->v_state_stack_.pop ();
}

void UnstructuredGrid_t_pskel::
all_0 (unsigned long& state,
       unsigned char* count,
       const ::xml_schema::ro_string& ns,
       const ::xml_schema::ro_string& n,
       const ::xml_schema::ro_string* t,
       bool start)
{
  XSD_UNUSED (t);

  if (n == "Piece" && ns.empty ())
  {
    if (count[0UL] == 0)
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->Piece_parser_;

        if (this->Piece_parser_)
          this->Piece_parser_->pre ();
      }
      else
      {
        if (this->Piece_parser_)
        {
          this->Piece_parser_->post_PieceUnstructuredGrid_t ();
          this->Piece ();
        }

        count[0UL] = 1;
      }
    }
    else
    {
      assert (start);
      state = ~0UL;
    }
  }
  else if (n.empty () && ns.empty ())
  {
    if (count[0UL] == 0)
      this->_expected_element (
        "", "Piece");

    state = ~0UL;
  }
  else
    state = ~0UL;
}

// Element validation and dispatch functions for PolyData_t_pskel.
//
bool PolyData_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "greeting" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &PolyData_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "greeting",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool PolyData_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void PolyData_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void PolyData_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "greeting");

  this->v_state_stack_.pop ();
}

void PolyData_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "greeting" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->greeting_parser_;

          if (this->greeting_parser_)
            this->greeting_parser_->pre ();
        }
        else
        {
          if (this->greeting_parser_)
          {
            this->greeting (this->greeting_parser_->post_string ());
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "greeting",
            ns, n);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for VTKFile_t_pskel.
//
bool VTKFile_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "UnstructuredGrid" && ns.empty ())
        s = 0UL;
      else if (n == "PolyData" && ns.empty ())
        s = 1UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &VTKFile_t_pskel::choice_0;
        vd->state = s;
        vd->count = 0;

        this->choice_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "UnstructuredGrid",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool VTKFile_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void VTKFile_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void VTKFile_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "UnstructuredGrid");

  this->v_state_stack_.pop ();
}

void VTKFile_t_pskel::
choice_0 (unsigned long& state,
          unsigned long& count,
          const ::xml_schema::ro_string& ns,
          const ::xml_schema::ro_string& n,
          const ::xml_schema::ro_string* t,
          bool start)
{
  XSD_UNUSED (count);
  XSD_UNUSED (ns);
  XSD_UNUSED (n);
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->UnstructuredGrid_parser_;

        if (this->UnstructuredGrid_parser_)
          this->UnstructuredGrid_parser_->pre ();
      }
      else
      {
        if (this->UnstructuredGrid_parser_)
        {
          this->UnstructuredGrid_parser_->post_UnstructuredGrid_t ();
          this->UnstructuredGrid ();
        }

        state = ~0UL;
      }

      break;
    }
    case 1UL:
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->PolyData_parser_;

        if (this->PolyData_parser_)
          this->PolyData_parser_->pre ();
      }
      else
      {
        if (this->PolyData_parser_)
        {
          this->PolyData_parser_->post_PolyData_t ();
          this->PolyData ();
        }

        state = ~0UL;
      }

      break;
    }
  }
}

// Element validation and dispatch functions for PointData_pskel.
//
bool PointData_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "DataArray" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &PointData_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool PointData_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void PointData_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void PointData_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void PointData_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "DataArray" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->DataArray_parser_;

          if (this->DataArray_parser_)
            this->DataArray_parser_->pre ();
        }
        else
        {
          if (this->DataArray_parser_)
          {
            this->DataArray_parser_->post_DataArray_t ();
            this->DataArray ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for CellData_pskel.
//
bool CellData_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "DataArray" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &CellData_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool CellData_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void CellData_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void CellData_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void CellData_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "DataArray" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->DataArray_parser_;

          if (this->DataArray_parser_)
            this->DataArray_parser_->pre ();
        }
        else
        {
          if (this->DataArray_parser_)
          {
            this->DataArray_parser_->post_DataArray_t ();
            this->DataArray ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for Points_pskel.
//
bool Points_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "DataArray" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &Points_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool Points_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void Points_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void Points_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void Points_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "DataArray" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->DataArray_parser_;

          if (this->DataArray_parser_)
            this->DataArray_parser_->pre ();
        }
        else
        {
          if (this->DataArray_parser_)
          {
            this->DataArray_parser_->post_DataArray_t ();
            this->DataArray ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for Cells_pskel.
//
bool Cells_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "DataArray" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &Cells_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool Cells_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void Cells_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void Cells_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void Cells_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "DataArray" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->DataArray_parser_;

          if (this->DataArray_parser_)
            this->DataArray_parser_->pre ();
        }
        else
        {
          if (this->DataArray_parser_)
          {
            this->DataArray_parser_->post_DataArray_t ();
            this->DataArray ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Attribute validation and dispatch functions for DataArray_t_pskel.
//
bool DataArray_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "type" && ns.empty ())
  {
    if (this->type_parser_)
    {
      this->type_parser_->pre ();
      this->type_parser_->_pre_impl ();
      this->type_parser_->_characters (s);
      this->type_parser_->_post_impl ();
      this->type_parser_->post_type ();
      this->type ();
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
    return true;
  }

  if (n == "Name" && ns.empty ())
  {
    if (this->Name_parser_)
    {
      this->Name_parser_->pre ();
      this->Name_parser_->_pre_impl ();
      this->Name_parser_->_characters (s);
      this->Name_parser_->_post_impl ();
      this->Name (this->Name_parser_->post_string ());
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->Name = true;
    return true;
  }

  if (n == "NumberOfComponents" && ns.empty ())
  {
    if (this->NumberOfComponents_parser_)
    {
      this->NumberOfComponents_parser_->pre ();
      this->NumberOfComponents_parser_->_pre_impl ();
      this->NumberOfComponents_parser_->_characters (s);
      this->NumberOfComponents_parser_->_post_impl ();
      this->NumberOfComponents (this->NumberOfComponents_parser_->post_integer ());
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->NumberOfComponents = true;
    return true;
  }

  if (n == "format" && ns.empty ())
  {
    if (this->format_parser_)
    {
      this->format_parser_->pre ();
      this->format_parser_->_pre_impl ();
      this->format_parser_->_characters (s);
      this->format_parser_->_post_impl ();
      this->format (this->format_parser_->post_string ());
    }

    return true;
  }

  if (n == "offset" && ns.empty ())
  {
    if (this->offset_parser_)
    {
      this->offset_parser_->pre ();
      this->offset_parser_->_pre_impl ();
      this->offset_parser_->_characters (s);
      this->offset_parser_->_post_impl ();
      this->offset (this->offset_parser_->post_integer ());
    }

    return true;
  }

  return this->::DataArrayList_t_pskel::_attribute_impl_phase_one (ns, n, s);
}

void DataArray_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.type = false;
  as.Name = false;
  as.NumberOfComponents = false;
  this->::DataArrayList_t_pskel::_pre_a_validate ();
}

void DataArray_t_pskel::
_post_a_validate ()
{
  this->::DataArrayList_t_pskel::_post_a_validate ();

  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.type)
    this->_expected_attribute (
      "", "type");
  if (!as.Name)
    this->_expected_attribute (
      "", "Name");
  if (!as.NumberOfComponents)
    this->_expected_attribute (
      "", "NumberOfComponents");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for PieceUnstructuredGrid_t_pskel.
//
bool PieceUnstructuredGrid_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "NumberOfPoints" && ns.empty ())
  {
    if (this->NumberOfPoints_parser_)
    {
      this->NumberOfPoints_parser_->pre ();
      this->NumberOfPoints_parser_->_pre_impl ();
      this->NumberOfPoints_parser_->_characters (s);
      this->NumberOfPoints_parser_->_post_impl ();
      this->NumberOfPoints (this->NumberOfPoints_parser_->post_integer ());
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->NumberOfPoints = true;
    return true;
  }

  if (n == "NumberOfCells" && ns.empty ())
  {
    if (this->NumberOfCells_parser_)
    {
      this->NumberOfCells_parser_->pre ();
      this->NumberOfCells_parser_->_pre_impl ();
      this->NumberOfCells_parser_->_characters (s);
      this->NumberOfCells_parser_->_post_impl ();
      this->NumberOfCells (this->NumberOfCells_parser_->post_integer ());
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->NumberOfCells = true;
    return true;
  }

  return false;
}

void PieceUnstructuredGrid_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.NumberOfPoints = false;
  as.NumberOfCells = false;
}

void PieceUnstructuredGrid_t_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.NumberOfPoints)
    this->_expected_attribute (
      "", "NumberOfPoints");
  if (!as.NumberOfCells)
    this->_expected_attribute (
      "", "NumberOfCells");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for VTKFile_t_pskel.
//
bool VTKFile_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "type" && ns.empty ())
  {
    if (this->type_parser_)
    {
      this->type_parser_->pre ();
      this->type_parser_->_pre_impl ();
      this->type_parser_->_characters (s);
      this->type_parser_->_post_impl ();
      this->type (this->type_parser_->post_string ());
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
    return true;
  }

  if (n == "version" && ns.empty ())
  {
    if (this->version_parser_)
    {
      this->version_parser_->pre ();
      this->version_parser_->_pre_impl ();
      this->version_parser_->_characters (s);
      this->version_parser_->_post_impl ();
      this->version (this->version_parser_->post_string ());
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->version = true;
    return true;
  }

  if (n == "byte_order" && ns.empty ())
  {
    if (this->byte_order_parser_)
    {
      this->byte_order_parser_->pre ();
      this->byte_order_parser_->_pre_impl ();
      this->byte_order_parser_->_characters (s);
      this->byte_order_parser_->_post_impl ();
      this->byte_order (this->byte_order_parser_->post_string ());
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->byte_order = true;
    return true;
  }

  return false;
}

void VTKFile_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.type = false;
  as.version = false;
  as.byte_order = false;
}

void VTKFile_t_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.type)
    this->_expected_attribute (
      "", "type");
  if (!as.version)
    this->_expected_attribute (
      "", "version");
  if (!as.byte_order)
    this->_expected_attribute (
      "", "byte_order");

  this->v_state_attr_stack_.pop ();
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

